namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ctrl = "http://nwalsh.com/xmlns/schema-control/"
default namespace db = "http://docbook.org/ns/docbook"
namespace html = "http://www.w3.org/1999/xhtml"
namespace mml = "http://www.w3.org/1998/Math/MathML"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace s = "http://www.ascc.net/xml/schematron"
namespace svg = "http://www.w3.org/2000/svg"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

s:ns [
  prefix = "a"
  uri = "http://relaxng.org/ns/compatibility/annotations/1.0"
]
s:ns [ prefix = "ctrl" uri = "http://nwalsh.com/xmlns/schema-control/" ]
s:ns [ prefix = "db" uri = "http://docbook.org/ns/docbook" ]
s:ns [
  prefix = "dbx"
  uri =
    "http://sourceforge.net/projects/docbook/defguide/schema/extra-markup"
]
s:ns [ prefix = "html" uri = "http://www.w3.org/1999/xhtml" ]
s:ns [ prefix = "mml" uri = "http://www.w3.org/1998/Math/MathML" ]
s:ns [ prefix = "rng" uri = "http://relaxng.org/ns/structure/1.0" ]
s:ns [ prefix = "s" uri = "http://www.ascc.net/xml/schematron" ]
s:ns [ prefix = "svg" uri = "http://www.w3.org/2000/svg" ]
s:ns [ prefix = "xi" uri = "http://www.w3.org/2001/XInclude" ]
s:ns [ prefix = "xlink" uri = "http://www.w3.org/1999/xlink" ]
#  DocBook V5.0CR5

# See http://docbook.org/ns/docbook
start =
  (db.set
   | db.book
   | db.divisions
   | db.components
   | db.navigation.components
   | db.section
   | db.para)
  | (db.sect1 | db.sect2 | db.sect3 | db.sect4 | db.sect5)
  | (db.refentry | db.refsection)
  | (db.refsect1 | db.refsect2 | db.refsect3)
  | db.setindex
div {
  db._any.attribute =
    
        attribute * { text }
  db._any =
    
        element * - (db:* | html:*) {
      (db._any.attribute | text | db._any)*
    }
}
db.arch.attribute =
  
    attribute arch { text }
db.audience.attribute =
  
    attribute audience { text }
db.condition.attribute =
  
    attribute condition { text }
db.conformance.attribute =
  
    attribute conformance { text }
db.os.attribute =
  
    attribute os { text }
db.revision.attribute =
  
    attribute revision { text }
db.security.attribute =
  
    attribute security { text }
db.userlevel.attribute =
  
    attribute userlevel { text }
db.vendor.attribute =
  
    attribute vendor { text }
db.wordsize.attribute =
  
    attribute wordsize { text }
db.effectivity.attributes =
  db.arch.attribute?
  & db.audience.attribute?
  & db.condition.attribute?
  & db.conformance.attribute?
  & db.os.attribute?
  & db.revision.attribute?
  & db.security.attribute?
  & db.userlevel.attribute?
  & db.vendor.attribute?
  & db.wordsize.attribute?
db.endterm.attribute =
  
    attribute endterm { xsd:IDREF }
db.linkend.attribute =
  
    attribute linkend { xsd:IDREF }
db.linkends.attribute =
  
    attribute linkends { xsd:IDREFS }
db.xlink.href.attribute =
  
    attribute xlink:href { xsd:anyURI }
db.xlink.type.attribute =
  
    attribute xlink:type {
    
        "simple"
  }
db.xlink.role.attribute =
  
    attribute xlink:role { xsd:anyURI }
db.xlink.arcrole.attribute =
  
    attribute xlink:arcrole { xsd:anyURI }
db.xlink.title.attribute =
  
    attribute xlink:title { text }?
db.xlink.show.enumeration =
  
    "new"
  | 
        "replace"
  | 
        "embed"
  | 
        "other"
  | 
        "none"
db.xlink.show.attribute =
  
    attribute xlink:show { db.xlink.show.enumeration }
db.xlink.actuate.enumeration =
  
    "onLoad"
  | 
        "onRequest"
  | 
        "other"
  | 
        "none"
db.xlink.actuate.attribute =
  
    attribute xlink:actuate { db.xlink.actuate.enumeration }
db.href.attributes =
  db.xlink.href.attribute
  & db.xlink.type.attribute?
  & db.xlink.role.attribute?
  & db.xlink.arcrole.attribute?
  & db.xlink.title.attribute?
  & db.xlink.show.attribute?
  & db.xlink.actuate.attribute?
db.xml.id.attribute =
  
    attribute xml:id { xsd:ID }
db.version.attribute =
  
    attribute version { text }
db.xml.lang.attribute =
  
    attribute xml:lang { text }
db.xml.base.attribute =
  
    attribute xml:base { xsd:anyURI }
db.remap.attribute =
  
    attribute remap { text }
db.xreflabel.attribute =
  
    attribute xreflabel { text }
db.xrefstyle.attribute =
  
    attribute xrefstyle { text }
db.revisionflag.enumeration =
  
    "changed"
  | 
        "added"
  | 
        "deleted"
  | 
        "off"
db.revisionflag.attribute =
  
    attribute revisionflag { db.revisionflag.enumeration }
db.dir.enumeration =
  
    "ltr"
  | 
        "rtl"
  | 
        "lro"
  | 
        "rlo"
db.dir.attribute =
  
    attribute dir { db.dir.enumeration }
db.common.base.attributes =
  db.version.attribute?
  & db.xml.lang.attribute?
  & db.xml.base.attribute?
  & db.remap.attribute?
  & db.xreflabel.attribute?
  & db.revisionflag.attribute?
  & db.dir.attribute?
  & db.effectivity.attributes
db.common.attributes =
  db.xml.id.attribute?
  & db.common.base.attributes
  & db.annotations.attribute?
db.common.idreq.attributes =
  db.xml.id.attribute
  & db.common.base.attributes
  & db.annotations.attribute?
db.common.linking.attributes =
  (db.linkend.attribute | db.href.attributes)?
db.common.req.linking.attributes =
  db.linkend.attribute | db.href.attributes
db.common.data.attributes =
  
    attribute format { text }?,
  (
      attribute fileref { xsd:anyURI }
   | 
          attribute entityref { xsd:ENTITY })
db.verbatim.continuation.enumeration =
  
    "continues"
  | 
        "restarts"
db.verbatim.continuation.attribute =
  
    attribute continuation { db.verbatim.continuation.enumeration }
db.verbatim.linenumbering.enumeration =
  
    "numbered"
  | 
        "unnumbered"
db.verbatim.linenumbering.attribute =
  
    attribute linenumbering { db.verbatim.linenumbering.enumeration }
db.verbatim.startinglinenumber.attribute =
  
    attribute startinglinenumber { xsd:integer }
db.verbatim.language.attribute =
  
    attribute language { text }
db.verbatim.xml.space.attribute =
  
    attribute xml:space {
    
        "preserve"
  }
db.verbatim.attributes =
  db.verbatim.continuation.attribute?
  & db.verbatim.linenumbering.attribute?
  & db.verbatim.startinglinenumber.attribute?
  & db.verbatim.language.attribute?
  & db.verbatim.xml.space.attribute?
db.label.attribute =
  
    attribute label { text }
db.width.characters.attribute =
  
    attribute width { xsd:nonNegativeInteger }
db.spacing.enumeration =
  
    "compact"
  | 
        "normal"
db.spacing.attribute =
  
    attribute spacing { db.spacing.enumeration }
db.pgwide.enumeration =
  
    "0"
  | 
        "1"
db.pgwide.attribute =
  
    attribute pgwide { db.pgwide.enumeration }
db.language.attribute =
  
    attribute language { text }
db.performance.enumeration =
  
    "optional"
  | 
        "required"
db.performance.attribute =
  
    attribute performance { db.performance.enumeration }
db.floatstyle.attribute =
  
    attribute floatstyle { text }
db.width.attribute =
  
    attribute width { text }
db.depth.attribute =
  
    attribute depth { text }
db.contentwidth.attribute =
  
    attribute contentwidth { text }
db.contentdepth.attribute =
  
    attribute contentdepth { text }
db.scalefit.enumeration =
  
    "0"
  | 
        "1"
db.scale.attribute =
  
    attribute scale { xsd:positiveInteger }
db.halign.enumeration =
  
    "center"
  | 
        "char"
  | 
        "justify"
  | 
        "left"
  | 
        "right"
db.valign.enumeration =
  
    "bottom"
  | 
        "middle"
  | 
        "top"
db.biblio.class.enumeration =
  
    "doi"
  | 
        "isbn"
  | 
        "isrn"
  | 
        "issn"
  | 
        "libraryofcongress"
  | 
        "pubsnumber"
  | 
        "uri"
db.biblio.class-enum.attribute =
  
    attribute class { db.biblio.class.enumeration }?
db.biblio.class-other.attribute =
  
    attribute otherclass { xsd:NMTOKEN }
db.biblio.class-other.attributes =
  
    attribute class {
    
        "other"
  }
  & db.biblio.class-other.attribute
db.biblio.class.attribute =
  db.biblio.class-enum.attribute | db.biblio.class-other.attributes
db.ubiq.inlines =
  (db.inlinemediaobject
   | db.remark
   | db.superscript
   | db.subscript
   | db.link.inlines
   | db.alt)
  | db.annotation
  | db.indexterm
db._text = (text | db.ubiq.inlines | db._phrase | db.replaceable)*
db._title = db.title? & db.titleabbrev? & db.subtitle?
db._title.req = db.title & db.titleabbrev? & db.subtitle?
db._title.only = db.title? & db.titleabbrev?
db._title.onlyreq = db.title & db.titleabbrev?
db._info = (db._title, db.titleforbidden.info?) | db.info?
db._info.title.req =
  (db._title.req, db.titleforbidden.info?) | db.titlereq.info
db._info.title.only =
  (db._title.only, db.titleforbidden.info?) | db.titleonly.info
db._info.title.onlyreq =
  (db._title.onlyreq, db.titleforbidden.info?) | db.titleonlyreq.info
db._info.title.forbidden = db.titleforbidden.info?
db.all.inlines =
  (text
   | db.ubiq.inlines
   | db.general.inlines
   | db.domain.inlines
   | db.extension.inlines)
  | db.xi.include
db.general.inlines =
  db.publishing.inlines
  | db.product.inlines
  | db.bibliography.inlines
  | db.graphic.inlines
  | db.indexing.inlines
  | db.link.inlines
db.domain.inlines =
  db.technical.inlines
  | db.math.inlines
  | db.markup.inlines
  | db.gui.inlines
  | db.keyboard.inlines
  | db.os.inlines
  | db.programming.inlines
  | db.error.inlines
db.technical.inlines =
  (db.replaceable | db.package | db.parameter)
  | db.termdef
  | db.nonterminal
  | (db.systemitem | db.option | db.optional | db.property)
db.product.inlines =
  db.trademark
  | (db.productnumber
     | db.productname
     | db.database
     | db.application
     | db.hardware)
db.bibliography.inlines =
  db.citation
  | db.citerefentry
  | db.citetitle
  | db.citebiblioid
  | db.author
  | db.person
  | db.personname
  | db.org
  | db.orgname
  | db.editor
  | db.jobtitle
db.publishing.inlines =
  (db.abbrev
   | db.acronym
   | db.date
   | db.emphasis
   | db.footnote
   | db.footnoteref
   | db.foreignphrase
   | db.phrase
   | db.quote
   | db.subscript
   | db.superscript
   | db.wordasword)
  | db.glossary.inlines
  | db.coref
db.graphic.inlines = db.inlinemediaobject
db.indexing.inlines = notAllowed | db.indexterm
db.link.inlines =
  (db.xref | db.link | db.olink | db.anchor) | db.biblioref
db.extension.inlines = notAllowed
db.nopara.blocks =
  (db.list.blocks
   | db.formal.blocks
   | db.informal.blocks
   | db.publishing.blocks
   | db.graphic.blocks
   | db.technical.blocks
   | db.verbatim.blocks
   | db.bridgehead
   | db.remark
   | db.revhistory)
  | db.indexterm
  | db.synopsis.blocks
  | db.admonition.blocks
db.para.blocks = db.anchor | db.para | db.formalpara | db.simpara
db.all.blocks =
  (db.nopara.blocks | db.para.blocks | db.extension.blocks)
  | db.annotation
  | db.xi.include
db.formal.blocks = (db.example | db.figure | db.table) | db.equation
db.informal.blocks =
  (db.informalexample | db.informalfigure | db.informaltable)
  | db.informalequation
db.publishing.blocks =
  db.sidebar | db.blockquote | db.address | db.epigraph
db.graphic.blocks = db.mediaobject | db.screenshot
db.technical.blocks =
  db.procedure
  | db.task
  | (db.productionset | db.constraintdef)
  | db.msgset
db.list.blocks =
  (db.itemizedlist
   | db.orderedlist
   | db.procedure
   | db.simplelist
   | db.variablelist
   | db.segmentedlist)
  | db.glosslist
  | db.bibliolist
  | db.calloutlist
  | db.qandaset
db.verbatim.blocks =
  (db.screen | db.literallayout)
  | (db.programlistingco | db.screenco)
  | (db.programlisting | db.synopsis)
db.extension.blocks = notAllowed
db.info.extension = db._any
db.info.elements =
  (db.abstract
   | db.address
   | db.artpagenums
   | db.author
   | db.authorgroup
   | db.authorinitials
   | db.bibliocoverage
   | db.biblioid
   | db.bibliosource
   | db.collab
   | db.confgroup
   | db.contractsponsor
   | db.contractnum
   | db.copyright
   | db.cover
   | db.date
   | db.edition
   | db.editor
   | db.issuenum
   | db.keywordset
   | db.legalnotice
   | db.mediaobject
   | db.org
   | db.orgname
   | db.othercredit
   | db.pagenums
   | db.printhistory
   | db.pubdate
   | db.publisher
   | db.publishername
   | db.releaseinfo
   | db.revhistory
   | db.seriesvolnums
   | db.subjectset
   | db.volumenum
   | db.info.extension)
  | db.annotation
  | db.extendedlink
  | (db.bibliomisc | db.bibliomset | db.bibliorelation | db.biblioset)
  | db.itermset
  | (db.productname | db.productnumber)
  | db.xi.include
db.bibliographic.elements =
  db.info.elements
  | db.publishing.inlines
  | db.citerefentry
  | db.citetitle
  | db.citebiblioid
  | db.person
  | db.personblurb
  | db.personname
  | db.subtitle
  | db.title
  | db.titleabbrev
div {
  db.title.role.attribute = attribute role { text }
  db.title.attlist =
    db.title.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.title =
    
        element title { db.title.attlist, db.all.inlines* }
}
div {
  db.titleabbrev.role.attribute = attribute role { text }
  db.titleabbrev.attlist =
    db.titleabbrev.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.titleabbrev =
    
        element titleabbrev { db.titleabbrev.attlist, db.all.inlines* }
}
div {
  db.subtitle.role.attribute = attribute role { text }
  db.subtitle.attlist =
    db.subtitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subtitle =
    
        element subtitle { db.subtitle.attlist, db.all.inlines* }
}
div {
  db.info.role.attribute = attribute role { text }
  db.info.attlist = db.info.role.attribute? & db.common.attributes
  db.info =
    
        element info { db.info.attlist, (db._title & db.info.elements*) }
}
div {
  db.titlereq.info.role.attribute = attribute role { text }
  db.titlereq.info.attlist =
    db.titlereq.info.role.attribute? & db.common.attributes
  db.titlereq.info =
    
        element info {
      db.titlereq.info.attlist, (db._title.req & db.info.elements*)
    }
}
div {
  db.titleonly.info.role.attribute = attribute role { text }
  db.titleonly.info.attlist =
    db.titleonly.info.role.attribute? & db.common.attributes
  db.titleonly.info =
    
        element info {
      db.titleonly.info.attlist, (db._title.only & db.info.elements*)
    }
}
div {
  db.titleonlyreq.info.role.attribute = attribute role { text }
  db.titleonlyreq.info.attlist =
    db.titleonlyreq.info.role.attribute? & db.common.attributes
  db.titleonlyreq.info =
    
        element info {
      db.titleonlyreq.info.attlist,
      (db._title.onlyreq & db.info.elements*)
    }
}
div {
  db.titleforbidden.info.role.attribute = attribute role { text }
  db.titleforbidden.info.attlist =
    db.titleforbidden.info.role.attribute? & db.common.attributes
  db.titleforbidden.info =
    
        element info { db.titleforbidden.info.attlist, db.info.elements* }
}
div {
  db.subjectset.role.attribute = attribute role { text }
  db.subjectset.scheme.attribute =
    
        attribute scheme { xsd:NMTOKEN }
  db.subjectset.attlist =
    db.subjectset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.subjectset.scheme.attribute?
  db.subjectset =
    
        element subjectset { db.subjectset.attlist, db.subject+ }
}
div {
  db.subject.role.attribute = attribute role { text }
  db.subject.weight.attribute =
    
        attribute weight { text }
  db.subject.attlist =
    db.subject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.subject.weight.attribute?
  db.subject =
    
        element subject { db.subject.attlist, db.subjectterm+ }
}
div {
  db.subjectterm.role.attribute = attribute role { text }
  db.subjectterm.attlist =
    db.subjectterm.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subjectterm =
    
        element subjectterm { db.subjectterm.attlist, text }
}
div {
  db.keywordset.role.attribute = attribute role { text }
  db.keywordset.attlist =
    db.keywordset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keywordset =
    
        element keywordset { db.keywordset.attlist, db.keyword+ }
}
div {
  db.keyword.role.attribute = attribute role { text }
  db.keyword.attlist =
    db.keyword.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keyword =
    
        element keyword { db.keyword.attlist, text }
}
db.table.choice = notAllowed | db.cals.table | db.html.table
db.informaltable.choice =
  notAllowed | db.cals.informaltable | db.html.informaltable
db.table = db.table.choice
db.informaltable = db.informaltable.choice
div {
  db.procedure.role.attribute = attribute role { text }
  db.procedure.attlist =
    db.procedure.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.procedure.info = db._info.title.only
  db.procedure =
    
        element procedure {
      db.procedure.attlist, db.procedure.info, db.all.blocks*, db.step+
    }
}
div {
  db.step.role.attribute = attribute role { text }
  db.step.attlist =
    db.step.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.performance.attribute?
  db.step.info = db._info.title.only
  # 
  # This content model is blocks*, step|stepalternatives, blocks* but
  # expressed this way it avoids UPA issues in XSD and DTD versions
  db.step =
    
        element step {
      db.step.attlist,
      db.step.info,
      ((db.all.blocks+,
        ((db.substeps | db.stepalternatives), db.all.blocks*)?)
       | ((db.substeps | db.stepalternatives), db.all.blocks*))
    }
}
div {
  db.stepalternatives.role.attribute = attribute role { text }
  db.stepalternatives.attlist =
    db.stepalternatives.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.performance.attribute?
  db.stepalternatives.info = db._info.title.forbidden
  db.stepalternatives =
    
        element stepalternatives {
      db.stepalternatives.attlist, db.stepalternatives.info, db.step+
    }
}
div {
  db.substeps.role.attribute = attribute role { text }
  db.substeps.attlist =
    db.substeps.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.performance.attribute?
  db.substeps =
    
        element substeps { db.substeps.attlist, db.step+ }
}
div {
  db.sidebar.role.attribute = attribute role { text }
  db.sidebar.attlist =
    db.sidebar.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.sidebar.info = db._info.title.only
  db.sidebar =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:sidebar"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur in the descendants of sidebar"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sidebar {
      db.sidebar.attlist, db.sidebar.info, db.all.blocks+
    }
}
div {
  db.abstract.role.attribute = attribute role { text }
  db.abstract.attlist =
    db.abstract.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.abstract.info = db._info.title.only
  db.abstract =
    
        element abstract {
      db.abstract.attlist, db.abstract.info, db.para.blocks+
    }
}
div {
  db.personblurb.role.attribute = attribute role { text }
  db.personblurb.attlist =
    db.personblurb.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.personblurb.info = db._info.title.only
  db.personblurb =
    
        element personblurb {
      db.personblurb.attlist, db.personblurb.info, db.para.blocks+
    }
}
div {
  db.blockquote.role.attribute = attribute role { text }
  db.blockquote.attlist =
    db.blockquote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.blockquote.info = db._info.title.only
  db.blockquote =
    
        element blockquote {
      db.blockquote.attlist,
      db.blockquote.info,
      db.attribution?,
      db.all.blocks+
    }
}
div {
  db.attribution.role.attribute = attribute role { text }
  db.attribution.attlist =
    db.attribution.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.attribution =
    
        element attribution {
      db.attribution.attlist,
      (db._text
       | db.person
       | db.personname
       | db.citetitle
       | db.citation)*
    }
}
div {
  db.bridgehead.renderas.enumeration =
    
        "sect1"
    | 
            "sect2"
    | 
            "sect3"
    | 
            "sect4"
    | 
            "sect5"
  db.bridgehead.renderas-enum.attribute =
    
        attribute renderas { db.bridgehead.renderas.enumeration }?
  db.bridgehead.renderas-other.attribute =
    
        attribute otherrenderas { xsd:NMTOKEN }
  db.bridgehead.renderas-other.attributes =
    
        attribute renderas {
      
            "other"
    }
    & db.bridgehead.renderas-other.attribute
  db.bridgehead.renderas.attribute =
    db.bridgehead.renderas-enum.attribute
    | db.bridgehead.renderas-other.attributes
  db.bridgehead.role.attribute = attribute role { text }
  db.bridgehead.attlist =
    db.bridgehead.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.bridgehead.renderas.attribute?
  db.bridgehead =
    
        element bridgehead { db.bridgehead.attlist, db.all.inlines* }
}
div {
  db.remark.role.attribute = attribute role { text }
  db.remark.attlist =
    db.remark.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.remark =
    
        element remark { db.remark.attlist, db._text }
}
div {
  db.epigraph.role.attribute = attribute role { text }
  db.epigraph.attlist =
    db.epigraph.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.epigraph.info = db._info.title.forbidden
  db.epigraph =
    
        element epigraph {
      db.epigraph.attlist,
      db.epigraph.info,
      db.attribution?,
      (db.para.blocks | db.literallayout)+
    }
}
div {
  db.footnote.role.attribute = attribute role { text }
  db.footnote.label.attribute =
    
        attribute label { xsd:NMTOKEN }
  db.footnote.attlist =
    db.footnote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.footnote.label.attribute?
  db.footnote =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:footnote)"
            "footnote must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:indexterm)"
            "indexterm must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:task)"
            "task must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:epigraph)"
            "epigraph must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnote"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of footnote"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element footnote { db.footnote.attlist, db.all.blocks+ }
}
div {
  db.formalpara.role.attribute = attribute role { text }
  db.formalpara.attlist =
    db.formalpara.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.formalpara.info = db._info.title.onlyreq
  db.formalpara =
    
        element formalpara {
      db.formalpara.attlist,
      db.formalpara.info,
      db.indexing.inlines*,
      db.para
    }
}
div {
  db.para.role.attribute = attribute role { text }
  db.para.attlist =
    db.para.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.para.info = db._info.title.forbidden
  db.para =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:para"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element para {
      db.para.attlist,
      db.para.info,
      (db.all.inlines | db.nopara.blocks)*
    }
}
div {
  db.simpara.role.attribute = attribute role { text }
  db.simpara.attlist =
    db.simpara.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.simpara.info = db._info.title.forbidden
  db.simpara =
    
        element simpara {
      db.simpara.attlist, db.simpara.info, db.all.inlines*
    }
}
div {
  db.itemizedlist.role.attribute = attribute role { text }
  db.itemizedlist.mark.attribute =
    
        attribute mark { xsd:NMTOKEN }
  db.itemizedlist.attlist =
    db.itemizedlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & db.itemizedlist.mark.attribute?
  db.itemizedlist.info = db._info.title.only
  db.itemizedlist =
    
        element itemizedlist {
      db.itemizedlist.attlist,
      db.itemizedlist.info,
      db.all.blocks*,
      db.listitem+
    }
}
div {
  db.orderedlist.role.attribute = attribute role { text }
  db.orderedlist.continuation.enumeration =
    
        "continues"
    | 
            "restarts"
  db.orderedlist.continuation.attribute =
    
        attribute continuation { db.orderedlist.continuation.enumeration }
  db.orderedlist.startingnumber.attribute =
    
        attribute startingnumber { xsd:integer }
  db.orderedlist.inheritnum.enumeration =
    
        "ignore"
    | 
            "inherit"
  db.orderedlist.inheritnum.attribute =
    
        attribute inheritnum { db.orderedlist.inheritnum.enumeration }
  db.orderedlist.numeration.enumeration =
    
        "arabic"
    | 
            "upperalpha"
    | 
            "loweralpha"
    | 
            "upperroman"
    | 
            "lowerroman"
  db.orderedlist.numeration.attribute =
    
        attribute numeration { db.orderedlist.numeration.enumeration }
  db.orderedlist.attlist =
    db.orderedlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & (db.orderedlist.continuation.attribute
       | db.orderedlist.startingnumber.attribute)?
    & db.orderedlist.inheritnum.attribute?
    & db.orderedlist.numeration.attribute?
  db.orderedlist.info = db._info.title.only
  db.orderedlist =
    
        element orderedlist {
      db.orderedlist.attlist,
      db.orderedlist.info,
      db.all.blocks*,
      db.listitem+
    }
}
div {
  db.listitem.role.attribute = attribute role { text }
  db.listitem.override.attribute =
    
            attribute override { xsd:NMTOKEN }
  db.listitem.attlist =
    db.listitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.listitem.override.attribute?
  db.listitem =
    
        element listitem { db.listitem.attlist, db.all.blocks+ }
}
div {
  db.segmentedlist.role.attribute = attribute role { text }
  db.segmentedlist.attlist =
    db.segmentedlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.segmentedlist.info = db._info.title.only
  db.segmentedlist =
    
        element segmentedlist {
      db.segmentedlist.attlist,
      db.segmentedlist.info,
      db.segtitle+,
      db.seglistitem+
    }
}
div {
  db.segtitle.role.attribute = attribute role { text }
  db.segtitle.attlist =
    db.segtitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.segtitle =
    
        element segtitle { db.segtitle.attlist, db.all.inlines* }
}
div {
  db.seglistitem.role.attribute = attribute role { text }
  db.seglistitem.attlist =
    db.seglistitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.seglistitem =
    
        [
      s:pattern [
        name = "Cardinality of segments and titles"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:seglistitem"
          "\x{a}" ~
          "            "
          s:assert [
            test = "count(db:seg) = count(../db:segtitle)"
            "The number of seg elements must be the same as the number of segtitle elements in the parent segmentedlist"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element seglistitem { db.seglistitem.attlist, db.seg+ }
}
div {
  db.seg.role.attribute = attribute role { text }
  db.seg.attlist =
    db.seg.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.seg =
    
        element seg { db.seg.attlist, db.all.inlines* }
}
div {
  db.simplelist.role.attribute = attribute role { text }
  db.simplelist.type.enumeration =
    
        "horiz"
    | 
            "vert"
    | 
            "inline"
  db.simplelist.type.attribute =
    
        [ a:defaultValue = "vert" ]
    attribute type { db.simplelist.type.enumeration }
  db.simplelist.columns.attribute =
    
        attribute columns { xsd:integer }
  db.simplelist.attlist =
    db.simplelist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.simplelist.type.attribute?
    & db.simplelist.columns.attribute?
  db.simplelist =
    
        element simplelist { db.simplelist.attlist, db.member+ }
}
div {
  db.member.role.attribute = attribute role { text }
  db.member.attlist =
    db.member.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.member =
    
        element member { db.member.attlist, db.all.inlines* }
}
div {
  db.variablelist.role.attribute = attribute role { text }
  db.variablelist.termlength.attribute =
    
        attribute termlength { text }
  db.variablelist.attlist =
    db.variablelist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spacing.attribute?
    & db.variablelist.termlength.attribute?
  db.variablelist.info = db._info.title.only
  db.variablelist =
    
        element variablelist {
      db.variablelist.attlist,
      db.variablelist.info,
      db.all.blocks*,
      db.varlistentry+
    }
}
div {
  db.varlistentry.role.attribute = attribute role { text }
  db.varlistentry.attlist =
    db.varlistentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.varlistentry =
    
        element varlistentry {
      db.varlistentry.attlist, db.term+, db.listitem
    }
}
div {
  db.term.role.attribute = attribute role { text }
  db.term.attlist =
    db.term.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.term =
    
        element term { db.term.attlist, db.all.inlines* }
}
div {
  db.example.role.attribute = attribute role { text }
  db.example.label.attribute = db.label.attribute
  db.example.width.attribute = db.width.characters.attribute
  db.example.pgwide.attribute = db.pgwide.attribute
  db.example.floatstyle.attribute = db.floatstyle.attribute
  db.example.attlist =
    db.example.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.example.label.attribute?
    & db.example.floatstyle.attribute?
    & (db.example.width.attribute | db.example.pgwide.attribute)?
  db.example.info = db._info.title.onlyreq
  db.example =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:example"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of example"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element example {
      db.example.attlist, db.example.info, db.all.blocks+, db.caption?
    }
}
div {
  db.informalexample.role.attribute = attribute role { text }
  db.informalexample.width.attribute = db.width.characters.attribute
  db.informalexample.floatstyle.attribute = db.floatstyle.attribute
  db.informalexample.attlist =
    db.informalexample.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.informalexample.floatstyle.attribute?
    & db.informalexample.width.attribute?
  db.informalexample.info = db._info.title.forbidden
  db.informalexample =
    
        element informalexample {
      db.informalexample.attlist,
      db.informalexample.info,
      db.all.blocks+,
      db.caption?
    }
}
db.verbatim.inlines = (db.all.inlines | db.lineannotation) | db.co
db.verbatim.contentmodel =
  db._info.title.forbidden, (db.textobject | db.verbatim.inlines*)
div {
  db.literallayout.role.attribute = attribute role { text }
  db.literallayout.class.enumeration =
    
        "monospaced"
    | 
            "normal"
  db.literallayout.class.attribute =
    
        attribute class { db.literallayout.class.enumeration }
  db.literallayout.attlist =
    db.literallayout.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.literallayout.class.attribute?
  db.literallayout =
    
        element literallayout {
      db.literallayout.attlist, db.verbatim.contentmodel
    }
}
div {
  db.screen.role.attribute = attribute role { text }
  db.screen.width.attribute = db.width.characters.attribute
  db.screen.attlist =
    db.screen.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.screen.width.attribute?
  db.screen =
    
        element screen { db.screen.attlist, db.verbatim.contentmodel }
}
div {
  db.screenshot.role.attribute = attribute role { text }
  db.screenshot.attlist =
    db.screenshot.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.screenshot.info = db._info
  db.screenshot =
    
        element screenshot {
      db.screenshot.attlist, db.screenshot.info, db.mediaobject
    }
}
div {
  db.figure.role.attribute = attribute role { text }
  db.figure.label.attribute = db.label.attribute
  db.figure.pgwide.attribute = db.pgwide.attribute
  db.figure.floatstyle.attribute = db.floatstyle.attribute
  db.figure.attlist =
    db.figure.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.figure.label.attribute?
    & db.figure.pgwide.attribute?
    & db.figure.floatstyle.attribute?
  db.figure.info = db._info.title.onlyreq
  db.figure =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:figure"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of figure"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element figure {
      db.figure.attlist, db.figure.info, db.all.blocks+, db.caption?
    }
}
div {
  db.informalfigure.role.attribute = attribute role { text }
  db.informalfigure.label.attribute = db.label.attribute
  db.informalfigure.pgwide.attribute = db.pgwide.attribute
  db.informalfigure.floatstyle.attribute = db.floatstyle.attribute
  db.informalfigure.attlist =
    db.informalfigure.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.informalfigure.label.attribute?
    & db.informalfigure.pgwide.attribute?
    & db.informalfigure.floatstyle.attribute?
  db.informalfigure.info = db._info.title.forbidden
  db.informalfigure =
    
        element informalfigure {
      db.informalfigure.attlist,
      db.informalfigure.info,
      db.all.blocks+,
      db.caption?
    }
}
db.mediaobject.content =
  (db.videoobject | db.audioobject | db.imageobject | db.textobject)
  | db.imageobjectco
div {
  db.mediaobject.role.attribute = attribute role { text }
  db.mediaobject.attlist =
    db.mediaobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.mediaobject.info = db._info.title.forbidden
  db.mediaobject =
    
        element mediaobject {
      db.mediaobject.attlist,
      db.mediaobject.info,
      db.alt?,
      db.mediaobject.content+,
      db.caption?
    }
}
div {
  db.inlinemediaobject.role.attribute = attribute role { text }
  db.inlinemediaobject.attlist =
    db.inlinemediaobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.inlinemediaobject.info = db._info.title.forbidden
  db.inlinemediaobject =
    
        element inlinemediaobject {
      db.inlinemediaobject.attlist,
      db.inlinemediaobject.info,
      db.alt?,
      db.mediaobject.content+
    }
}
div {
  db.videoobject.role.attribute = attribute role { text }
  db.videoobject.attlist =
    db.videoobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.videoobject.info = db._info.title.forbidden
  db.videoobject =
    
        element videoobject {
      db.videoobject.attlist, db.videoobject.info, db.videodata
    }
}
div {
  db.audioobject.role.attribute = attribute role { text }
  db.audioobject.attlist =
    db.audioobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.audioobject.info = db._info.title.forbidden
  db.audioobject =
    
        element audioobject {
      db.audioobject.attlist, db.audioobject.info, db.audiodata
    }
}
db.imageobject.content =
  db.imagedata | db.imagedata.mathml | db.imagedata.svg
div {
  db.imageobject.role.attribute = attribute role { text }
  db.imageobject.attlist =
    db.imageobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.imageobject.info = db._info.title.forbidden
  db.imageobject =
    
        element imageobject {
      db.imageobject.attlist,
      db.imageobject.info,
      db.imageobject.content
    }
}
div {
  db.textobject.role.attribute = attribute role { text }
  db.textobject.attlist =
    db.textobject.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.textobject.info = db._info.title.forbidden
  db.textobject =
    
        element textobject {
      db.textobject.attlist,
      db.textobject.info,
      (db.phrase | db.textdata | db.all.blocks+)
    }
}
div {
  db.videodata.role.attribute = attribute role { text }
  db.videodata.align.enumeration = db.halign.enumeration
  db.videodata.align.attribute =
    
        attribute align { db.videodata.align.enumeration }
  db.videodata.valign.enumeration = db.valign.enumeration
  db.videodata.valign.attribute =
    
        attribute valign { db.videodata.valign.enumeration }
  db.videodata.width.attribute = db.width.attribute
  db.videodata.depth.attribute = db.depth.attribute
  db.videodata.contentwidth.attribute = db.contentwidth.attribute
  db.videodata.contentdepth.attribute = db.contentdepth.attribute
  db.videodata.scalefit.enumeration = db.scalefit.enumeration
  db.videodata.scalefit.attribute =
    
        attribute scalefit { db.videodata.scalefit.enumeration }
  db.videodata.scale.attribute = db.scale.attribute
  db.videodata.attlist =
    db.videodata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.videodata.align.attribute?
    & db.videodata.valign.attribute?
    & db.videodata.width.attribute?
    & db.videodata.contentwidth.attribute?
    & db.videodata.scalefit.attribute?
    & db.videodata.scale.attribute?
    & db.videodata.depth.attribute?
    & db.videodata.contentdepth.attribute?
  db.videodata.info = db._info.title.forbidden
  db.videodata =
    
        element videodata { db.videodata.attlist, db.videodata.info }
}
div {
  db.audiodata.role.attribute = attribute role { text }
  db.audiodata.attlist =
    db.audiodata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
  db.audiodata.info = db._info.title.forbidden
  db.audiodata =
    
        element audiodata { db.audiodata.attlist, db.audiodata.info }
}
div {
  db.imagedata.role.attribute = attribute role { text }
  db.imagedata.align.enumeration = db.halign.enumeration
  db.imagedata.align.attribute =
    
        attribute align { db.imagedata.align.enumeration }
  db.imagedata.valign.enumeration = db.valign.enumeration
  db.imagedata.valign.attribute =
    
        attribute valign { db.imagedata.valign.enumeration }
  db.imagedata.width.attribute = db.width.attribute
  db.imagedata.depth.attribute = db.depth.attribute
  db.imagedata.contentwidth.attribute = db.contentwidth.attribute
  db.imagedata.contentdepth.attribute = db.contentdepth.attribute
  db.imagedata.scalefit.enumeration = db.scalefit.enumeration
  db.imagedata.scalefit.attribute =
    
        attribute scalefit { db.imagedata.scalefit.enumeration }
  db.imagedata.scale.attribute = db.scale.attribute
  db.imagedata.attlist =
    db.imagedata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.imagedata.align.attribute?
    & db.imagedata.valign.attribute?
    & db.imagedata.width.attribute?
    & db.imagedata.contentwidth.attribute?
    & db.imagedata.scalefit.attribute?
    & db.imagedata.scale.attribute?
    & db.imagedata.depth.attribute?
    & db.imagedata.contentdepth.attribute?
  db.imagedata.info = db._info.title.forbidden
  db.imagedata =
    
        element imagedata { db.imagedata.attlist, db.imagedata.info }
}
div {
  db.textdata.role.attribute = attribute role { text }
  db.textdata.encoding.attribute =
    
        attribute encoding { text }
  db.textdata.attlist =
    db.textdata.role.attribute?
    & db.common.attributes
    & db.common.data.attributes
    & db.textdata.encoding.attribute?
  db.textdata.info = db._info.title.forbidden
  db.textdata =
    
        element textdata { db.textdata.attlist, db.textdata.info }
}
div {
  db.caption.role.attribute = attribute role { text }
  db.caption.attlist =
    db.caption.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.caption.info = db._info.title.forbidden
  db.caption =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:task)"
            "task must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element caption {
      db.caption.attlist, db.caption.info, db.all.blocks+
    }
}
div {
  db.address.role.attribute = attribute role { text }
  db.address.attlist =
    db.address.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
  db.address =
    
        element address {
      db.address.attlist,
      (db._text
       | db.personname
       | db.pob
       | db.street
       | db.city
       | db.state
       | db.postcode
       | db.country
       | db.phone
       | db.fax
       | db.email
       | db.uri
       | db.otheraddr)*
    }
}
div {
  db.street.role.attribute = attribute role { text }
  db.street.attlist =
    db.street.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.street =
    
        element street { db.street.attlist, db._text }
}
div {
  db.pob.role.attribute = attribute role { text }
  db.pob.attlist =
    db.pob.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.pob =
    
        element pob { db.pob.attlist, db._text }
}
div {
  db.postcode.role.attribute = attribute role { text }
  db.postcode.attlist =
    db.postcode.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.postcode =
    
        element postcode { db.postcode.attlist, db._text }
}
div {
  db.city.role.attribute = attribute role { text }
  db.city.attlist =
    db.city.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.city =
    
        element city { db.city.attlist, db._text }
}
div {
  db.state.role.attribute = attribute role { text }
  db.state.attlist =
    db.state.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.state =
    
        element state { db.state.attlist, db._text }
}
div {
  db.country.role.attribute = attribute role { text }
  db.country.attlist =
    db.country.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.country =
    
        element country { db.country.attlist, db._text }
}
div {
  db.phone.role.attribute = attribute role { text }
  db.phone.attlist =
    db.phone.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.phone =
    
        element phone { db.phone.attlist, db._text }
}
div {
  db.fax.role.attribute = attribute role { text }
  db.fax.attlist =
    db.fax.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.fax =
    
        element fax { db.fax.attlist, db._text }
}
div {
  db.otheraddr.role.attribute = attribute role { text }
  db.otheraddr.attlist =
    db.otheraddr.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.otheraddr =
    
        element otheraddr { db.otheraddr.attlist, db._text }
}
div {
  db.affiliation.role.attribute = attribute role { text }
  db.affiliation.attlist =
    db.affiliation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.affiliation =
    
        element affiliation {
      db.affiliation.attlist,
      db.shortaffil?,
      db.jobtitle*,
      (db.org? | (db.orgname?, db.orgdiv*, db.address*))
    }
}
div {
  db.shortaffil.role.attribute = attribute role { text }
  db.shortaffil.attlist =
    db.shortaffil.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.shortaffil =
    
        element shortaffil { db.shortaffil.attlist, db._text }
}
div {
  db.jobtitle.role.attribute = attribute role { text }
  db.jobtitle.attlist =
    db.jobtitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.jobtitle =
    
        element jobtitle { db.jobtitle.attlist, db._text }
}
div {
  db.orgname.class.enumeration =
    
        "consortium"
    | 
            "corporation"
    | 
            "informal"
    | 
            "nonprofit"
  db.orgname.class-enum.attribute =
    
        attribute class { db.orgname.class.enumeration }
  db.orgname.class-other.attributes =
    
        attribute class {
      
            "other"
    },
    
        attribute otherclass { text }
  db.orgname.class.attribute =
    db.orgname.class-enum.attribute | db.orgname.class-other.attributes
  db.orgname.role.attribute = attribute role { text }
  db.orgname.attlist =
    db.orgname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.orgname.class.attribute?
  db.orgname =
    
        element orgname { db.orgname.attlist, db._text }
}
div {
  db.orgdiv.role.attribute = attribute role { text }
  db.orgdiv.attlist =
    db.orgdiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.orgdiv =
    
        element orgdiv { db.orgdiv.attlist, db.all.inlines* }
}
div {
  db.artpagenums.role.attribute = attribute role { text }
  db.artpagenums.attlist =
    db.artpagenums.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.artpagenums =
    
        element artpagenums { db.artpagenums.attlist, db._text }
}
div {
  db.personname.role.attribute = attribute role { text }
  db.personname.attlist =
    db.personname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.personname =
    
        element personname {
      db.personname.attlist,
      (db._text
       | (db.honorific
          | db.firstname
          | db.surname
          | db.lineage
          | db.othername)+)
    }
}
db.person.author.contentmodel =
  db.personname,
  (db.personblurb
   | db.affiliation
   | db.email
   | db.uri
   | db.address
   | db.contrib)*
db.org.author.contentmodel =
  db.orgname,
  (db.orgdiv
   | db.affiliation
   | db.email
   | db.uri
   | db.address
   | db.contrib)*
db.credit.contentmodel =
  db.person.author.contentmodel | db.org.author.contentmodel
div {
  db.author.role.attribute = attribute role { text }
  db.author.attlist =
    db.author.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.author =
    
        element author { db.author.attlist, db.credit.contentmodel }
}
div {
  db.authorgroup.role.attribute = attribute role { text }
  db.authorgroup.attlist =
    db.authorgroup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.authorgroup =
    
        element authorgroup {
      db.authorgroup.attlist, (db.author | db.editor | db.othercredit)+
    }
}
div {
  db.collab.role.attribute = attribute role { text }
  db.collab.attlist =
    db.collab.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.collab =
    
        element collab {
      db.collab.attlist,
      (db.person | db.personname | db.org | db.orgname)+,
      db.affiliation*
    }
}
div {
  db.authorinitials.role.attribute = attribute role { text }
  db.authorinitials.attlist =
    db.authorinitials.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.authorinitials =
    
        element authorinitials { db.authorinitials.attlist, db._text }
}
div {
  db.person.role.attribute = attribute role { text }
  db.person.attlist =
    db.person.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.person =
    
        element person {
      db.person.attlist,
      db.personname,
      (db.address
       | db.affiliation
       | db.email
       | db.uri
       | db.personblurb)*
    }
}
div {
  db.org.role.attribute = attribute role { text }
  db.org.attlist =
    db.org.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.org =
    
        element org {
      db.org.attlist,
      db.orgname,
      (db.address | db.affiliation | db.email | db.uri | db.orgdiv)*
    }
}
div {
  db.confgroup.role.attribute = attribute role { text }
  db.confgroup.attlist =
    db.confgroup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.confgroup =
    
        element confgroup {
      db.confgroup.attlist,
      (db.confdates
       | db.conftitle
       | db.confnum
       | db.confsponsor
       | db.address)*
    }
}
div {
  db.confdates.role.attribute = attribute role { text }
  db.confdates.attlist =
    db.confdates.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.confdates =
    
        element confdates { db.confdates.attlist, db._text }
}
div {
  db.conftitle.role.attribute = attribute role { text }
  db.conftitle.attlist =
    db.conftitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.conftitle =
    
        element conftitle { db.conftitle.attlist, db._text }
}
div {
  db.confnum.role.attribute = attribute role { text }
  db.confnum.attlist =
    db.confnum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.confnum =
    
        element confnum { db.confnum.attlist, db._text }
}
div {
  db.confsponsor.role.attribute = attribute role { text }
  db.confsponsor.attlist =
    db.confsponsor.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.confsponsor =
    
        element confsponsor { db.confsponsor.attlist, db._text }
}
div {
  db.contractnum.role.attribute = attribute role { text }
  db.contractnum.attlist =
    db.contractnum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.contractnum =
    
        element contractnum { db.contractnum.attlist, db._text }
}
div {
  db.contractsponsor.role.attribute = attribute role { text }
  db.contractsponsor.attlist =
    db.contractsponsor.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.contractsponsor =
    
        element contractsponsor { db.contractsponsor.attlist, db._text }
}
div {
  db.copyright.role.attribute = attribute role { text }
  db.copyright.attlist =
    db.copyright.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.copyright =
    
        element copyright { db.copyright.attlist, db.year+, db.holder* }
}
div {
  db.year.role.attribute = attribute role { text }
  db.year.attlist =
    db.year.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.year =
    
        element year { db.year.attlist, db._text }
}
div {
  db.holder.role.attribute = attribute role { text }
  db.holder.attlist =
    db.holder.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.holder =
    
        element holder { db.holder.attlist, db._text }
}
db.cover.contentmodel =
  (db.para.blocks
   | db.extension.blocks
   | db.list.blocks
   | db.informal.blocks
   | db.publishing.blocks
   | db.graphic.blocks
   | db.technical.blocks
   | db.verbatim.blocks
   | db.bridgehead
   | db.remark
   | db.revhistory)
  | db.synopsis.blocks
div {
  db.cover.role.attribute = attribute role { text }
  db.cover.attlist =
    db.cover.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.cover =
    
        element cover { db.cover.attlist, db.cover.contentmodel+ }
}
db.date.contentmodel =
  xsd:date | xsd:dateTime | xsd:gYearMonth | xsd:gYear | text
div {
  db.date.role.attribute = attribute role { text }
  db.date.attlist =
    db.date.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.date =
    
        element date { db.date.attlist, db.date.contentmodel }
}
div {
  db.edition.role.attribute = attribute role { text }
  db.edition.attlist =
    db.edition.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.edition =
    
        element edition { db.edition.attlist, db._text }
}
div {
  db.editor.role.attribute = attribute role { text }
  db.editor.attlist =
    db.editor.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.editor =
    
        element editor { db.editor.attlist, db.credit.contentmodel }
}
div {
  db.biblioid.role.attribute = attribute role { text }
  db.biblioid.attlist =
    db.biblioid.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.biblio.class.attribute
  db.biblioid =
    
        element biblioid { db.biblioid.attlist, db._text }
}
div {
  db.citebiblioid.role.attribute = attribute role { text }
  db.citebiblioid.attlist =
    db.citebiblioid.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.biblio.class.attribute
  db.citebiblioid =
    
        element citebiblioid { db.citebiblioid.attlist, db._text }
}
div {
  db.bibliosource.role.attribute = attribute role { text }
  db.bibliosource.attlist =
    db.bibliosource.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.biblio.class.attribute
  db.bibliosource =
    
        element bibliosource { db.bibliosource.attlist, db._text }
}
div {
  db.bibliorelation.type.enumeration =
    
        "hasformat"
    | 
            "haspart"
    | 
            "hasversion"
    | 
            "isformatof"
    | 
            "ispartof"
    | 
            "isreferencedby"
    | 
            "isreplacedby"
    | 
            "isrequiredby"
    | 
            "isversionof"
    | 
            "references"
    | 
            "replaces"
    | 
            "requires"
  db.bibliorelation.type-enum.attribute =
    
        attribute type { db.bibliorelation.type.enumeration }?
  db.bibliorelation.type-other.attributes =
    
        attribute type {
      
            "othertype"
    }?,
    
        attribute othertype { xsd:NMTOKEN }
  db.bibliorelation.type.attribute =
    db.bibliorelation.type-enum.attribute
    | db.bibliorelation.type-other.attributes
  db.bibliorelation.role.attribute = attribute role { text }
  db.bibliorelation.attlist =
    db.bibliorelation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.biblio.class.attribute
    & db.bibliorelation.type.attribute
  db.bibliorelation =
    
        element bibliorelation { db.bibliorelation.attlist, db._text }
}
div {
  db.bibliocoverage.spacial.enumeration =
    
        "dcmipoint"
    | 
            "iso3166"
    | 
            "dcmibox"
    | 
            "tgn"
  db.bibliocoverage.spatial-enum.attribute =
    
        attribute spatial { db.bibliocoverage.spacial.enumeration }?
  db.bibliocoverage.spatial-other.attributes =
    
        attribute spatial {
      
            "otherspatial"
    }?,
    
        attribute otherspatial { xsd:NMTOKEN }
  db.bibliocoverage.spatial.attribute =
    db.bibliocoverage.spatial-enum.attribute
    | db.bibliocoverage.spatial-other.attributes
  db.bibliocoverage.temporal.enumeration =
    
        "dcmiperiod"
    | 
            "w3c-dtf"
  db.bibliocoverage.temporal-enum.attribute =
    
        attribute temporal { db.bibliocoverage.temporal.enumeration }?
  db.bibliocoverage.temporal-other.attributes =
    
        attribute temporal {
      
            "othertemporal"
    }?,
    
        attribute othertemporal { xsd:NMTOKEN }
  db.bibliocoverage.temporal.attribute =
    db.bibliocoverage.temporal-enum.attribute
    | db.bibliocoverage.temporal-other.attributes
  db.bibliocoverage.coverage.attrib =
    db.bibliocoverage.spatial.attribute
    & db.bibliocoverage.temporal.attribute
  db.bibliocoverage.role.attribute = attribute role { text }
  db.bibliocoverage.attlist =
    db.bibliocoverage.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.bibliocoverage.coverage.attrib
  db.bibliocoverage =
    
        element bibliocoverage { db.bibliocoverage.attlist, db._text }
}
div {
  db.legalnotice.role.attribute = attribute role { text }
  db.legalnotice.attlist =
    db.legalnotice.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.legalnotice.info = db._info.title.only
  db.legalnotice =
    
        element legalnotice {
      db.legalnotice.attlist, db.legalnotice.info, db.all.blocks+
    }
}
div {
  db.othercredit.class.enumeration =
    
        "copyeditor"
    | 
            "graphicdesigner"
    | 
            "other"
    | 
            "productioneditor"
    | 
            "technicaleditor"
    | 
            "translator"
  db.othercredit.class-enum.attribute =
    
        attribute class { db.othercredit.class.enumeration }?
  db.othercredit.class-other.attribute =
    
        attribute otherclass { xsd:NMTOKEN }
  db.othercredit.class-other.attributes =
    
        attribute class {
      
            "other"
    }
    & db.othercredit.class-other.attribute
  db.othercredit.class.attribute =
    db.othercredit.class-enum.attribute
    | db.othercredit.class-other.attributes
  db.othercredit.role.attribute = attribute role { text }
  db.othercredit.attlist =
    db.othercredit.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.othercredit.class.attribute
  db.othercredit =
    
        element othercredit {
      db.othercredit.attlist, db.credit.contentmodel
    }
}
div {
  db.pagenums.role.attribute = attribute role { text }
  db.pagenums.attlist =
    db.pagenums.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.pagenums =
    
        element pagenums { db.pagenums.attlist, db._text }
}
div {
  db.contrib.role.attribute = attribute role { text }
  db.contrib.attlist =
    db.contrib.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.contrib =
    
        element contrib { db.contrib.attlist, db._text }
}
div {
  db.honorific.role.attribute = attribute role { text }
  db.honorific.attlist =
    db.honorific.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.honorific =
    
        element honorific { db.honorific.attlist, db._text }
}
div {
  db.firstname.role.attribute = attribute role { text }
  db.firstname.attlist =
    db.firstname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.firstname =
    
        element firstname { db.firstname.attlist, db._text }
}
div {
  db.surname.role.attribute = attribute role { text }
  db.surname.attlist =
    db.surname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.surname =
    
        element surname { db.surname.attlist, db._text }
}
div {
  db.lineage.role.attribute = attribute role { text }
  db.lineage.attlist =
    db.lineage.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.lineage =
    
        element lineage { db.lineage.attlist, db._text }
}
div {
  db.othername.role.attribute = attribute role { text }
  db.othername.attlist =
    db.othername.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.othername =
    
        element othername { db.othername.attlist, db._text }
}
div {
  db.printhistory.role.attribute = attribute role { text }
  db.printhistory.attlist =
    db.printhistory.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.printhistory =
    
        element printhistory { db.printhistory.attlist, db.para.blocks+ }
}
div {
  db.pubdate.role.attribute = attribute role { text }
  db.pubdate.attlist =
    db.pubdate.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.pubdate =
    
        element pubdate { db.pubdate.attlist, db.date.contentmodel }
}
div {
  db.publisher.role.attribute = attribute role { text }
  db.publisher.attlist =
    db.publisher.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.publisher =
    
        element publisher {
      db.publisher.attlist, db.publishername, db.address*
    }
}
div {
  db.publishername.role.attribute = attribute role { text }
  db.publishername.attlist =
    db.publishername.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.publishername =
    
        element publishername { db.publishername.attlist, db._text }
}
div {
  db.releaseinfo.role.attribute = attribute role { text }
  db.releaseinfo.attlist =
    db.releaseinfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.releaseinfo =
    
        element releaseinfo { db.releaseinfo.attlist, db._text }
}
div {
  db.revhistory.role.attribute = attribute role { text }
  db.revhistory.attlist =
    db.revhistory.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revhistory.info = db._info.title.only
  db.revhistory =
    
        element revhistory {
      db.revhistory.attlist, db.revhistory.info, db.revision+
    }
}
div {
  db.revision.role.attribute = attribute role { text }
  db.revision.attlist =
    db.revision.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revision =
    
        element revision {
      db.revision.attlist,
      db.revnumber?,
      db.date,
      (db.authorinitials | db.author)*,
      (db.revremark | db.revdescription)?
    }
}
div {
  db.revnumber.role.attribute = attribute role { text }
  db.revnumber.attlist =
    db.revnumber.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revnumber =
    
        element revnumber { db.revnumber.attlist, db._text }
}
div {
  db.revremark.role.attribute = attribute role { text }
  db.revremark.attlist =
    db.revremark.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revremark =
    
        element revremark { db.revremark.attlist, db._text }
}
div {
  db.revdescription.role.attribute = attribute role { text }
  db.revdescription.attlist =
    db.revdescription.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.revdescription =
    
        element revdescription { db.revdescription.attlist, db.all.blocks* }
}
div {
  db.seriesvolnums.role.attribute = attribute role { text }
  db.seriesvolnums.attlist =
    db.seriesvolnums.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.seriesvolnums =
    
        element seriesvolnums { db.seriesvolnums.attlist, db._text }
}
div {
  db.volumenum.role.attribute = attribute role { text }
  db.volumenum.attlist =
    db.volumenum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.volumenum =
    
        element volumenum { db.volumenum.attlist, db._text }
}
div {
  db.issuenum.role.attribute = attribute role { text }
  db.issuenum.attlist =
    db.issuenum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.issuenum =
    
        element issuenum { db.issuenum.attlist, db._text }
}
div {
  db.package.role.attribute = attribute role { text }
  db.package.attlist =
    db.package.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.package =
    
        element package { db.package.attlist, db._text }
}
div {
  db.email.role.attribute = attribute role { text }
  db.email.attlist =
    db.email.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.email =
    
        element email { db.email.attlist, db._text }
}
div {
  db.lineannotation.role.attribute = attribute role { text }
  db.lineannotation.attlist =
    db.lineannotation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.lineannotation =
    
        element lineannotation { db.lineannotation.attlist, db._text }
}
div {
  db.parameter.class.enumeration =
    
        "command"
    | 
            "function"
    | 
            "option"
  db.parameter.class.attribute =
    
        attribute class { db.parameter.class.enumeration }
  db.parameter.role.attribute = attribute role { text }
  db.parameter.attlist =
    db.parameter.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.parameter.class.attribute?
  db.parameter =
    
        element parameter { db.parameter.attlist, db._text }
}
db.replaceable.inlines = db._text | db.co
div {
  db.replaceable.class.enumeration =
    
        "command"
    | 
            "function"
    | 
            "option"
    | 
            "parameter"
  db.replaceable.class.attribute =
    
        attribute class { db.replaceable.class.enumeration }
  db.replaceable.role.attribute = attribute role { text }
  db.replaceable.attlist =
    db.replaceable.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.replaceable.class.attribute?
  db.replaceable =
    
        element replaceable {
      db.replaceable.attlist, db.replaceable.inlines*
    }
}
div {
  db.uri.type.attribute =
    
        attribute type { text }?
  db.uri.role.attribute = attribute role { text }
  db.uri.attlist =
    db.uri.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.uri.type.attribute
  db.uri =
    
        element uri { db.uri.attlist, db._text }
}
div {
  db.abbrev.role.attribute = attribute role { text }
  db.abbrev.attlist =
    db.abbrev.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.abbrev =
    
        element abbrev {
      db.abbrev.attlist,
      (db._text | db.superscript | db.subscript | db.trademark)*
    }
}
div {
  db.acronym.role.attribute = attribute role { text }
  db.acronym.attlist =
    db.acronym.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.acronym =
    
        element acronym {
      db.acronym.attlist,
      (db._text | db.superscript | db.subscript | db.trademark)*
    }
}
div {
  db.citation.role.attribute = attribute role { text }
  db.citation.attlist =
    db.citation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.citation =
    
        element citation { db.citation.attlist, db.all.inlines* }
}
div {
  db.citerefentry.role.attribute = attribute role { text }
  db.citerefentry.attlist =
    db.citerefentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.citerefentry =
    
        element citerefentry {
      db.citerefentry.attlist, db.refentrytitle, db.manvolnum?
    }
}
div {
  db.refentrytitle.role.attribute = attribute role { text }
  db.refentrytitle.attlist =
    db.refentrytitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refentrytitle =
    
        element refentrytitle { db.refentrytitle.attlist, db.all.inlines* }
}
div {
  db.manvolnum.role.attribute = attribute role { text }
  db.manvolnum.attlist =
    db.manvolnum.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.manvolnum =
    
        element manvolnum { db.manvolnum.attlist, db._text }
}
div {
  db.citetitle.pubwork.enumeration =
    
        "article"
    | 
            "bbs"
    | 
            "book"
    | 
            "cdrom"
    | 
            "chapter"
    | 
            "dvd"
    | 
            "emailmessage"
    | 
            "gopher"
    | 
            "journal"
    | 
            "manuscript"
    | 
            "newsposting"
    | 
            "part"
    | 
            "refentry"
    | 
            "section"
    | 
            "series"
    | 
            "set"
    | 
            "webpage"
    | 
            "wiki"
  db.citetitle.pubwork.attribute =
    
        attribute pubwork { db.citetitle.pubwork.enumeration }
  db.citetitle.role.attribute = attribute role { text }
  db.citetitle.attlist =
    db.citetitle.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.citetitle.pubwork.attribute?
  db.citetitle =
    
        element citetitle { db.citetitle.attlist, db.all.inlines* }
}
div {
  db.emphasis.role.attribute = attribute role { text }
  db.emphasis.attlist =
    db.emphasis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.emphasis =
    
        element emphasis { db.emphasis.attlist, db.all.inlines* }
}
div {
  db._emphasis =
    
        element emphasis { db.emphasis.attlist, (db._text | db._emphasis)* }
}
div {
  db.foreignphrase.role.attribute = attribute role { text }
  db.foreignphrase.attlist =
    db.foreignphrase.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.foreignphrase =
    
        element foreignphrase {
      db.foreignphrase.attlist, (text | db.general.inlines)*
    }
}
div {
  db.phrase.role.attribute = attribute role { text }
  db.phrase.attlist =
    db.phrase.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.phrase =
    
        element phrase { db.phrase.attlist, db.all.inlines* }
}
div {
  db._phrase =
    
        element phrase { db.phrase.attlist, db._text }
}
div {
  db.quote.role.attribute = attribute role { text }
  db.quote.attlist =
    db.quote.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.quote =
    
        element quote { db.quote.attlist, db.all.inlines* }
}
div {
  db.subscript.role.attribute = attribute role { text }
  db.subscript.attlist =
    db.subscript.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.subscript =
    
            element subscript { db.subscript.attlist, db._text }
}
div {
  db.superscript.role.attribute = attribute role { text }
  db.superscript.attlist =
    db.superscript.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.superscript =
    
        element superscript { db.superscript.attlist, db._text }
}
div {
  db.trademark.class.enumeration =
    
        "copyright"
    | 
            "registered"
    | 
            "service"
    | 
            "trade"
  db.trademark.class.attribute =
    
        attribute class { db.trademark.class.enumeration }
  db.trademark.role.attribute = attribute role { text }
  db.trademark.attlist =
    db.trademark.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.trademark.class.attribute?
  db.trademark =
    
        element trademark { db.trademark.attlist, db._text }
}
div {
  db.wordasword.role.attribute = attribute role { text }
  db.wordasword.attlist =
    db.wordasword.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.wordasword =
    
        element wordasword { db.wordasword.attlist, db._text }
}
div {
  db.footnoteref.role.attribute = attribute role { text }
  db.footnoteref.label.attribute = db.label.attribute
  db.footnoteref.attlist =
    db.footnoteref.role.attribute?
    & db.common.attributes
    & db.linkend.attribute
    & db.footnoteref.label.attribute?
  db.footnoteref =
    
        [
      s:pattern [
        name = "Footnote reference type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:footnoteref"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@linkend]) = 'footnote' and namespace-uri(//*[@xml:id=current()/@linkend]) = 'http://docbook.org/ns/docbook'"
            "@linkend on footnoteref must point to a footnote."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element footnoteref { db.footnoteref.attlist, empty }
}
div {
  db.xref.role.attribute = attribute role { text }
  db.xref.xrefstyle.attribute = db.xrefstyle.attribute
  db.xref.endterm.attribute = db.endterm.attribute
  db.xref.attlist =
    db.xref.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
    & db.xref.xrefstyle.attribute?
    & db.xref.endterm.attribute?
  db.xref =
    
        element xref { db.xref.attlist, empty }
}
div {
  db.link.role.attribute = attribute role { text }
  db.link.xrefstyle.attribute = db.xrefstyle.attribute
  db.link.endterm.attribute = db.endterm.attribute
  db.link.attlist =
    db.link.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
    & db.link.xrefstyle.attribute?
    & db.link.endterm.attribute?
  db.link =
    
        element link { db.link.attlist, db.all.inlines* }
}
div {
  db.olink.role.attribute = attribute role { text }
  db.olink.xrefstyle.attribute = db.xrefstyle.attribute
  db.olink.localinfo.attribute =
    
        attribute localinfo { text }
  db.olink.targetdoc.attribute =
    
        attribute targetdoc { xsd:anyURI }
  db.olink.targetptr.attribute =
    
        attribute targetptr { text }
  db.olink.type.attribute =
    
        attribute type { text }
  db.olink.attlist =
    db.common.attributes
    & db.olink.targetdoc.attribute?
    & db.olink.role.attribute?
    & db.olink.xrefstyle.attribute?
    & db.olink.localinfo.attribute?
    & db.olink.targetptr.attribute?
    & db.olink.type.attribute?
  db.olink =
    
        element olink { db.olink.attlist, db.all.inlines* }
}
div {
  db.anchor.role.attribute = attribute role { text }
  db.anchor.attlist =
    db.anchor.role.attribute? & db.common.idreq.attributes
  db.anchor =
    
        element anchor { db.anchor.attlist, empty }
}
div {
  db.alt.role.attribute = attribute role { text }
  db.alt.attlist = db.alt.role.attribute? & db.common.attributes
  db.alt =
    
        element alt { db.alt.attlist, (text | db.inlinemediaobject)* }
}
db.status.attribute =
  
    attribute status { text }
db.toplevel.sections =
  ((db.section+, db.simplesect*) | db.simplesect+)
  | (db.sect1+, db.simplesect*)
  | db.refentry+
  | ((db.section | db.xi.include)+ | (db.simplesect | db.xi.include)+)
  | (db.refentry | db.xi.include)+
  | (db.refsect1 | db.xi.include)+
  | (db.sect1 | db.xi.include)+
db.toplevel.blocks.or.sections =
  (db.all.blocks+, db.toplevel.sections?) | db.toplevel.sections
db.recursive.sections =
  ((db.section+, db.simplesect*) | db.simplesect+)
  | db.refentry+
  | ((db.section | db.xi.include)+ | (db.simplesect | db.xi.include)+)
  | (db.refentry | db.xi.include)+
  | (db.refsect1 | db.xi.include)+
db.recursive.blocks.or.sections =
  (db.all.blocks+, db.recursive.sections?) | db.recursive.sections
db.divisions = db.part | db.reference | db.xi.include
db.components =
  (db.dedication
   | db.acknowledgements
   | db.preface
   | db.chapter
   | db.appendix
   | db.article
   | db.colophon)
  | db.xi.include
db.navigation.components =
  notAllowed | db.glossary | db.bibliography | db.index | db.toc
db.component.contentmodel =
  db.navigation.components*,
  db.toplevel.blocks.or.sections,
  db.navigation.components*
db.setindex.components = notAllowed | db.setindex
db.toc.components = notAllowed | db.toc
db.set.components = db.set | db.book
div {
  db.set.status.attribute = db.status.attribute
  db.set.role.attribute = attribute role { text }
  db.set.attlist =
    db.set.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.set.status.attribute?
  db.set.info = db._info.title.req
  db.set =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:set"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element set {
      db.set.attlist,
      db.set.info,
      db.toc.components?,
      db.set.components+,
      db.setindex.components?
    }
}
div {
  db.book.status.attribute = db.status.attribute
  db.book.role.attribute = attribute role { text }
  db.book.attlist =
    db.book.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.book.status.attribute?
  db.book.info = db._info
  db.book =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:book"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element book {
      db.book.attlist,
      db.book.info,
      (db.navigation.components | db.components | db.divisions)*
    }
}
div {
  db.dedication.status.attribute = db.status.attribute
  db.dedication.role.attribute = attribute role { text }
  db.dedication.attlist =
    db.dedication.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.dedication.status.attribute?
  db.dedication.info = db._info
  db.dedication =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:dedication"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element dedication {
      db.dedication.attlist, db.dedication.info, db.all.blocks+
    }
}
div {
  db.acknowledgements.status.attribute = db.status.attribute
  db.acknowledgements.role.attribute = attribute role { text }
  db.acknowledgements.attlist =
    db.acknowledgements.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.acknowledgements.status.attribute?
  db.acknowledgements.info = db._info
  db.acknowledgements =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:acknowledgements"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element acknowledgements {
      db.acknowledgements.attlist,
      db.acknowledgements.info,
      db.all.blocks+
    }
}
div {
  db.colophon.status.attribute = db.status.attribute
  db.colophon.role.attribute = attribute role { text }
  db.colophon.attlist =
    db.colophon.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.colophon.status.attribute?
  db.colophon.info = db._info
  db.colophon =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:colophon"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element colophon {
      db.colophon.attlist, db.colophon.info, db.all.blocks+
    }
}
div {
  db.appendix.status.attribute = db.status.attribute
  db.appendix.role.attribute = attribute role { text }
  db.appendix.attlist =
    db.appendix.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.appendix.status.attribute?
  db.appendix.info = db._info.title.req
  db.appendix =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:appendix"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element appendix {
      db.appendix.attlist, db.appendix.info, db.component.contentmodel
    }
}
div {
  db.chapter.status.attribute = db.status.attribute
  db.chapter.role.attribute = attribute role { text }
  db.chapter.attlist =
    db.chapter.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.chapter.status.attribute?
  db.chapter.info = db._info.title.req
  db.chapter =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:chapter"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element chapter {
      db.chapter.attlist, db.chapter.info, db.component.contentmodel
    }
}
db.part.components =
  (db.navigation.components | db.components)
  | (db.refentry | db.reference)
  | db.xi.include
div {
  db.part.status.attribute = db.status.attribute
  db.part.role.attribute = attribute role { text }
  db.part.attlist =
    db.part.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.part.status.attribute?
  db.part.info = db._info.title.req
  db.part =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:part"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element part {
      db.part.attlist, db.part.info, db.partintro?, db.part.components+
    }
}
div {
  db.preface.status.attribute = db.status.attribute
  db.preface.role.attribute = attribute role { text }
  db.preface.attlist =
    db.preface.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.preface.status.attribute?
  db.preface.info = db._info.title.req
  db.preface =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:preface"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element preface {
      db.preface.attlist, db.preface.info, db.component.contentmodel
    }
}
div {
  db.partintro.status.attribute = db.status.attribute
  db.partintro.role.attribute = attribute role { text }
  db.partintro.attlist =
    db.partintro.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.partintro.status.attribute?
  db.partintro.info = db._info
  db.partintro =
    
        element partintro {
      db.partintro.attlist,
      db.partintro.info,
      db.toplevel.blocks.or.sections
    }
}
div {
  db.section.status.attribute = db.status.attribute
  db.section.role.attribute = attribute role { text }
  db.section.attlist =
    db.section.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.section.status.attribute?
  db.section.info = db._info.title.req
  db.section =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:section"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element section {
      db.section.attlist,
      db.section.info,
      db.recursive.blocks.or.sections,
      db.navigation.components*
    }
}
div {
  db.simplesect.status.attribute = db.status.attribute
  db.simplesect.role.attribute = attribute role { text }
  db.simplesect.attlist =
    db.simplesect.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.simplesect.status.attribute?
  db.simplesect.info = db._info.title.req
  db.simplesect =
    
        element simplesect {
      db.simplesect.attlist, db.simplesect.info, db.all.blocks+
    }
}
db.article.components = db.toplevel.sections
div {
  db.article.status.attribute = db.status.attribute
  db.article.class.enumeration =
    
        "faq"
    | 
            "journalarticle"
    | 
            "productsheet"
    | 
            "specification"
    | 
            "techreport"
    | 
            "whitepaper"
  db.article.class.attribute =
    
        attribute class { db.article.class.enumeration }
  db.article.role.attribute = attribute role { text }
  db.article.attlist =
    db.article.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.article.status.attribute?
    & db.article.class.attribute?
  db.article.info = db._info.title.req
  db.article =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:article"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element article {
      db.article.attlist,
      db.article.info,
      (db.navigation.components
       | db.appendix
       | db.acknowledgements
       | db.colophon)*,
      ((db.all.blocks+, db.article.components?)
       | db.article.components),
      (db.navigation.components
       | db.appendix
       | db.acknowledgements
       | db.colophon)*
    }
}
db.annotations.attribute =
  
    attribute annotations { text }
div {
  db.annotation.role.attribute = attribute role { text }
  db.annotation.annotates.attribute =
    
        attribute annotates { text }
  db.annotation.attlist =
    db.annotation.role.attribute?
    & db.annotation.annotates.attribute?
    & db.common.attributes
  db.annotation.info = db._info.title.only
  db.annotation =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:annotation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:annotation)"
            "annotation must not occur in the descendants of annotation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element annotation {
      db.annotation.attlist, db.annotation.info, db.all.blocks+
    }
}
db.xlink.from.attribute =
  
    attribute xlink:from { xsd:NMTOKEN }?
db.xlink.label.attribute =
  
    attribute xlink:label { xsd:NMTOKEN }?
db.xlink.to.attribute =
  
    attribute xlink:to { xsd:NMTOKEN }?
div {
  db.extendedlink.role.attribute = attribute role { text }
  db.extendedlink.attlist =
    db.extendedlink.role.attribute?
    & db.common.attributes
    & 
            [ a:defaultValue = "extended" ]
      attribute xlink:type {
        
                "extended"
      }?
    & db.xlink.role.attribute?
    & db.xlink.title.attribute?
  db.extendedlink =
    
        element extendedlink {
      db.extendedlink.attlist, (db.locator | db.arc)+
    }
}
div {
  db.locator.role.attribute = attribute role { text }
  db.locator.attlist =
    db.locator.role.attribute?
    & db.common.attributes
    & 
            [ a:defaultValue = "locator" ]
      attribute xlink:type {
        
                "locator"
      }?
    & db.xlink.href.attribute
    & db.xlink.role.attribute?
    & db.xlink.title.attribute?
    & db.xlink.label.attribute?
  db.locator =
    
        element locator { db.locator.attlist, empty }
}
div {
  db.arc.role.attribute = attribute role { text }
  db.arc.attlist =
    db.arc.role.attribute?
    & db.common.attributes
    & 
            [ a:defaultValue = "arc" ]
      attribute xlink:type {
        
                "arc"
      }?
    & db.xlink.arcrole.attribute?
    & db.xlink.title.attribute?
    & db.xlink.show.attribute?
    & db.xlink.actuate.attribute?
    & db.xlink.from.attribute?
    & db.xlink.to.attribute?
  db.arc =
    
        element arc { db.arc.attlist, empty }
}
db.sect1.sections =
  ((db.sect2+, db.simplesect*) | db.simplesect+)
  | (db.sect2 | db.xi.include)+
div {
  db.sect1.status.attribute = db.status.attribute
  db.sect1.role.attribute = attribute role { text }
  db.sect1.attlist =
    db.sect1.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.sect1.status.attribute?
  db.sect1.info = db._info.title.req
  db.sect1 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:sect1"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sect1 {
      db.sect1.attlist,
      db.sect1.info,
      ((db.all.blocks+, db.sect1.sections?) | db.sect1.sections),
      db.navigation.components*
    }
}
db.sect2.sections =
  ((db.sect3+, db.simplesect*) | db.simplesect+)
  | (db.sect3 | db.xi.include)+
div {
  db.sect2.status.attribute = db.status.attribute
  db.sect2.role.attribute = attribute role { text }
  db.sect2.attlist =
    db.sect2.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.sect2.status.attribute?
  db.sect2.info = db._info.title.req
  db.sect2 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:sect2"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sect2 {
      db.sect2.attlist,
      db.sect2.info,
      ((db.all.blocks+, db.sect2.sections?) | db.sect2.sections),
      db.navigation.components*
    }
}
db.sect3.sections =
  ((db.sect4+, db.simplesect*) | db.simplesect+)
  | (db.sect4 | db.xi.include)+
div {
  db.sect3.status.attribute = db.status.attribute
  db.sect3.role.attribute = attribute role { text }
  db.sect3.attlist =
    db.sect3.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.sect3.status.attribute?
  db.sect3.info = db._info.title.req
  db.sect3 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:sect3"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sect3 {
      db.sect3.attlist,
      db.sect3.info,
      ((db.all.blocks+, db.sect3.sections?) | db.sect3.sections),
      db.navigation.components*
    }
}
db.sect4.sections =
  ((db.sect5+, db.simplesect*) | db.simplesect+)
  | (db.sect5 | db.xi.include)+
div {
  db.sect4.status.attribute = db.status.attribute
  db.sect4.role.attribute = attribute role { text }
  db.sect4.attlist =
    db.sect4.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.sect4.status.attribute?
  db.sect4.info = db._info.title.req
  db.sect4 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:sect4"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sect4 {
      db.sect4.attlist,
      db.sect4.info,
      ((db.all.blocks+, db.sect4.sections?) | db.sect4.sections),
      db.navigation.components*
    }
}
db.sect5.sections = db.simplesect+ | (db.simplesect | db.xi.include)+
div {
  db.sect5.status.attribute = db.status.attribute
  db.sect5.role.attribute = attribute role { text }
  db.sect5.attlist =
    db.sect5.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.sect5.status.attribute?
  db.sect5.info = db._info.title.req
  db.sect5 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:sect5"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element sect5 {
      db.sect5.attlist,
      db.sect5.info,
      ((db.all.blocks+, db.sect5.sections?) | db.sect5.sections),
      db.navigation.components*
    }
}
db.toplevel.refsection =
  db.refsection+
  | db.refsect1+
  | (db.refentry | db.xi.include)+
  | (db.refsect1 | db.xi.include)+
db.secondlevel.refsection =
  db.refsection+
  | db.refsect2+
  | (db.refentry | db.xi.include)+
  | (db.refsect2 | db.xi.include)+
db.reference.components = db.refentry | db.xi.include
div {
  db.reference.role.attribute = attribute role { text }
  db.reference.attlist =
    db.reference.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.status.attribute?
    & db.label.attribute?
  db.reference.info = db._info.title.req
  db.reference =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:reference"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element reference {
      db.reference.attlist,
      db.reference.info,
      db.partintro?,
      db.reference.components+
    }
}
div {
  db.refentry.role.attribute = attribute role { text }
  db.refentry.attlist =
    db.refentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.status.attribute?
    & db.label.attribute?
  db.refentry.info = db._info.title.forbidden
  db.refentry =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:refentry"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element refentry {
      db.refentry.attlist,
      db.indexterm*,
      db.refentry.info,
      db.refmeta?,
      db.refnamediv+,
      db.refsynopsisdiv?,
      db.toplevel.refsection
    }
}
div {
  db.refmeta.role.attribute = attribute role { text }
  db.refmeta.attlist =
    db.refmeta.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refmeta =
    
        element refmeta {
      db.refmeta.attlist,
      db.indexterm*,
      db.refentrytitle,
      db.manvolnum?,
      db.refmiscinfo*,
      db.indexterm*
    }
}
db.refmiscinfo.class.enumeration =
  
    "source"
  | 
        "version"
  | 
        "manual"
  | 
        "sectdesc"
  | 
        "software"
db.refmiscinfo.class-enum.attribute =
  
    attribute class { db.refmiscinfo.class.enumeration }?
db.refmiscinfo.class-other.attribute =
  
    attribute otherclass { text }
db.refmiscinfo.class-other.attributes =
  
    attribute class {
    
        "other"
  }
  & db.refmiscinfo.class-other.attribute
db.refmiscinfo.class.attribute =
  db.refmiscinfo.class-enum.attribute
  | db.refmiscinfo.class-other.attributes
div {
  db.refmiscinfo.role.attribute = attribute role { text }
  db.refmiscinfo.attlist =
    db.refmiscinfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.refmiscinfo.class.attribute?
  db.refmiscinfo =
    
        element refmiscinfo { db.refmiscinfo.attlist, db._text }
}
div {
  db.refnamediv.role.attribute = attribute role { text }
  db.refnamediv.attlist =
    db.refnamediv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refnamediv =
    
        element refnamediv {
      db.refnamediv.attlist,
      db.refdescriptor?,
      db.refname+,
      db.refpurpose,
      db.refclass*
    }
}
div {
  db.refdescriptor.role.attribute = attribute role { text }
  db.refdescriptor.attlist =
    db.refdescriptor.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refdescriptor =
    
        element refdescriptor { db.refdescriptor.attlist, db.all.inlines* }
}
div {
  db.refname.role.attribute = attribute role { text }
  db.refname.attlist =
    db.refname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refname =
    
        element refname { db.refname.attlist, db.all.inlines* }
}
div {
  db.refpurpose.role.attribute = attribute role { text }
  db.refpurpose.attlist =
    db.refpurpose.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refpurpose =
    
        element refpurpose { db.refpurpose.attlist, db.all.inlines* }
}
div {
  db.refclass.role.attribute = attribute role { text }
  db.refclass.attlist =
    db.refclass.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refclass =
    
        element refclass { db.refclass.attlist, (text | db.application)* }
}
div {
  db.refsynopsisdiv.role.attribute = attribute role { text }
  db.refsynopsisdiv.attlist =
    db.refsynopsisdiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.refsynopsisdiv.info = db._info
  db.refsynopsisdiv =
    
        element refsynopsisdiv {
      db.refsynopsisdiv.attlist,
      db.refsynopsisdiv.info,
      ((db.all.blocks+, db.secondlevel.refsection?)
       | db.secondlevel.refsection)
    }
}
div {
  db.refsection.role.attribute = attribute role { text }
  db.refsection.attlist =
    db.refsection.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.status.attribute?
    & db.label.attribute?
  db.refsection.info = db._info.title.req
  db.refsection =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:refsection"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element refsection {
      db.refsection.attlist,
      db.refsection.info,
      ((db.all.blocks+, db.refsection*) | db.refsection+)
    }
}
db.refsect1.sections = db.refsect2+
div {
  db.refsect1.status.attribute = db.status.attribute
  db.refsect1.role.attribute = attribute role { text }
  db.refsect1.attlist =
    db.refsect1.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.refsect1.status.attribute?
  db.refsect1.info = db._info.title.req
  db.refsect1 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:refsect1"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element refsect1 {
      db.refsect1.attlist,
      db.refsect1.info,
      ((db.all.blocks+, db.refsect1.sections?) | db.refsect1.sections)
    }
}
db.refsect2.sections = db.refsect3+
div {
  db.refsect2.status.attribute = db.status.attribute
  db.refsect2.role.attribute = attribute role { text }
  db.refsect2.attlist =
    db.refsect2.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.refsect2.status.attribute?
  db.refsect2.info = db._info.title.req
  db.refsect2 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:refsect2"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element refsect2 {
      db.refsect2.attlist,
      db.refsect2.info,
      ((db.all.blocks+, db.refsect2.sections?) | db.refsect2.sections)
    }
}
div {
  db.refsect3.status.attribute = db.status.attribute
  db.refsect3.role.attribute = attribute role { text }
  db.refsect3.attlist =
    db.refsect3.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.refsect3.status.attribute?
  db.refsect3.info = db._info.title.req
  db.refsect3 =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:refsect3"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element refsect3 {
      db.refsect3.attlist, db.refsect3.info, db.all.blocks+
    }
}
db.glossary.inlines = db.firstterm | db.glossterm
db.baseform.attribute =
  
    attribute baseform { text }?
div {
  db.glosslist.role.attribute = attribute role { text }
  db.glosslist.attlist =
    db.glosslist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.glosslist.info = db._info.title.only
  db.glosslist =
    
        element glosslist {
      db.glosslist.attlist,
      db.glosslist.info?,
      db.all.blocks*,
      db.glossentry+
    }
}
div {
  db.glossentry.role.attribute = attribute role { text }
  db.glossentry.sortas.attribute =
    
        attribute sortas { text }
  db.glossentry.attlist =
    db.glossentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.glossentry.sortas.attribute?
  db.glossentry =
    
        element glossentry {
      db.glossentry.attlist,
      db.glossterm,
      db.acronym?,
      db.abbrev?,
      db.indexterm*,
      (db.glosssee | db.glossdef+)
    }
}
div {
  db.glossdef.role.attribute = attribute role { text }
  db.glossdef.subject.attribute =
    
        attribute subject { text }
  db.glossdef.attlist =
    db.glossdef.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.glossdef.subject.attribute?
  db.glossdef =
    
        element glossdef {
      db.glossdef.attlist, db.all.blocks+, db.glossseealso*
    }
}
div {
  db.glosssee.role.attribute = attribute role { text }
  db.glosssee.otherterm.attribute =
    
        attribute otherterm { xsd:IDREF }
  db.glosssee.attlist =
    db.glosssee.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.glosssee.otherterm.attribute?
  db.glosssee =
    
            [
      s:pattern [
        name = "Glosssary 'see' type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:glosssee[@otherterm]"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@otherterm]) = 'glossentry' and namespace-uri(//*[@xml:id=current()/@otherterm]) = 'http://docbook.org/ns/docbook'"
            "@otherterm on glosssee must point to a glossentry."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element glosssee { db.glosssee.attlist, db.all.inlines* }
}
div {
  db.glossseealso.role.attribute = attribute role { text }
  db.glossseealso.otherterm.attribute =
    
        attribute otherterm { xsd:IDREF }
  db.glossseealso.attlist =
    db.glossseealso.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.glossseealso.otherterm.attribute?
  db.glossseealso =
    
        [
      s:pattern [
        name = "Glossary 'seealso' type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:glossseealso[@otherterm]"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@otherterm]) = 'glossentry' and namespace-uri(//*[@xml:id=current()/@otherterm]) = 'http://docbook.org/ns/docbook'"
            "@otherterm on glossseealso must point to a glossentry."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element glossseealso { db.glossseealso.attlist, db.all.inlines* }
}
div {
  db.firstterm.role.attribute = attribute role { text }
  db.firstterm.attlist =
    db.firstterm.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.baseform.attribute
  db.firstterm =
    
        [
      s:pattern [
        name = "Glossary 'firstterm' type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:firstterm[@linkend]"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@linkend]) = 'glossentry' and namespace-uri(//*[@xml:id=current()/@linkend]) = 'http://docbook.org/ns/docbook'"
            "@linkend on firstterm must point to a glossentry."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element firstterm { db.firstterm.attlist, db.all.inlines* }
}
div {
  db.glossterm.role.attribute = attribute role { text }
  db.glossterm.attlist =
    db.glossterm.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.baseform.attribute
  db.glossterm =
    
        [
      s:pattern [
        name = "Glossary 'glossterm' type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:glossterm[@linkend]"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@linkend]) = 'glossentry' and namespace-uri(//*[@xml:id=current()/@linkend]) = 'http://docbook.org/ns/docbook'"
            "@linkend on glossterm must point to a glossentry."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element glossterm { db.glossterm.attlist, db.all.inlines* }
}
div {
  db.glossary.status.attribute = db.status.attribute
  db.glossary.role.attribute = attribute role { text }
  db.glossary.attlist =
    db.glossary.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.glossary.status.attribute?
  db.glossary.info = db._info
  db.glossary =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:glossary"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element glossary {
      db.glossary.attlist,
      db.glossary.info,
      db.all.blocks*,
      (db.glossdiv* | db.glossentry*),
      db.bibliography?
    }
}
div {
  db.glossdiv.status.attribute = db.status.attribute
  db.glossdiv.role.attribute = attribute role { text }
  db.glossdiv.attlist =
    db.glossdiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.glossdiv.status.attribute?
  db.glossdiv.info = db._info.title.req
  db.glossdiv =
    
        element glossdiv {
      db.glossdiv.attlist,
      db.glossdiv.info,
      db.all.blocks*,
      db.glossentry+
    }
}
div {
  db.termdef.role.attribute = attribute role { text }
  db.termdef.attlist =
    db.termdef.role.attribute?
    & db.glossentry.sortas.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.baseform.attribute
  db.termdef =
    
        [
      s:pattern [
        name = "Glossary term definition constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:termdef"
          "\x{a}" ~
          "            "
          s:assert [
            test = "count(db:firstterm) = 1"
            "A termdef must contain exactly one firstterm"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element termdef { db.termdef.attlist, db.all.inlines* }
}
db.relation.attribute =
  
    attribute relation { text }
div {
  db.biblioentry.role.attribute = attribute role { text }
  db.biblioentry.attlist =
    db.biblioentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.biblioentry =
    
        element biblioentry {
      db.biblioentry.attlist, db.bibliographic.elements+
    }
}
div {
  db.bibliomixed.role.attribute = attribute role { text }
  db.bibliomixed.attlist =
    db.bibliomixed.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.bibliomixed =
    
        element bibliomixed {
      db.bibliomixed.attlist, (text | db.bibliographic.elements)*
    }
}
div {
  db.biblioset.relation.attribute = db.relation.attribute
  db.biblioset.role.attribute = attribute role { text }
  db.biblioset.attlist =
    db.biblioset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.biblioset.relation.attribute?
  db.biblioset =
    
        element biblioset {
      db.biblioset.attlist, db.bibliographic.elements+
    }
}
div {
  db.bibliomset.relation.attribute = db.relation.attribute
  db.bibliomset.role.attribute = attribute role { text }
  db.bibliomset.attlist =
    db.bibliomset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.bibliomset.relation.attribute?
  db.bibliomset =
    
        element bibliomset {
      db.bibliomset.attlist, (db._text | db.bibliographic.elements)*
    }
}
div {
  db.bibliomisc.role.attribute = attribute role { text }
  db.bibliomisc.attlist =
    db.bibliomisc.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.bibliomisc =
    
        element bibliomisc { db.bibliomisc.attlist, db._text }
}
div {
  db.bibliography.status.attrib = db.status.attribute
  db.bibliography.role.attribute = attribute role { text }
  db.bibliography.attlist =
    db.bibliography.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.bibliography.status.attrib?
  db.bibliography.info = db._info
  db.bibliography =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:bibliography"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element bibliography {
      db.bibliography.attlist,
      db.bibliography.info,
      db.all.blocks*,
      (db.bibliodiv+ | (db.biblioentry | db.bibliomixed)+)
    }
}
div {
  db.bibliodiv.status.attrib = db.status.attribute
  db.bibliodiv.role.attribute = attribute role { text }
  db.bibliodiv.attlist =
    db.bibliodiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.bibliodiv.status.attrib?
  db.bibliodiv.info = db._info.title.req
  db.bibliodiv =
    
        element bibliodiv {
      db.bibliodiv.attlist,
      db.bibliodiv.info,
      db.all.blocks*,
      (db.biblioentry | db.bibliomixed)+
    }
}
div {
  db.bibliolist.role.attribute = attribute role { text }
  db.bibliolist.attlist =
    db.bibliolist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.bibliolist.info = db._info.title.only
  db.bibliolist =
    
        element bibliolist {
      db.bibliolist.attlist,
      db.bibliolist.info?,
      db.all.blocks*,
      (db.biblioentry | db.bibliomixed)+
    }
}
div {
  db.biblioref.role.attribute = attribute role { text }
  db.biblioref.xrefstyle.attribute = db.xrefstyle.attribute
  db.biblioref.endterm.attribute = db.endterm.attribute
  db.biblioref.units.attribute =
    
        attribute units { xsd:token }
  db.biblioref.begin.attribute =
    
        attribute begin { xsd:token }
  db.biblioref.end.attribute =
    
        attribute end { xsd:token }
  db.biblioref.attlist =
    db.biblioref.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
    & db.biblioref.xrefstyle.attribute?
    & db.biblioref.endterm.attribute?
    & db.biblioref.units.attribute?
    & db.biblioref.begin.attribute?
    & db.biblioref.end.attribute?
  db.biblioref =
    
        element biblioref { db.biblioref.attlist, empty }
}
db.significance.enumeration =
  
    "normal"
  | 
        "preferred"
db.significance.attribute =
  
    attribute significance { db.significance.enumeration }
db.zone.attribute =
  
    attribute zone { xsd:IDREFS }
db.indexterm.pagenum.attribute =
  
    attribute pagenum { text }
db.scope.enumeration =
  
    "all"
  | 
        "global"
  | 
        "local"
db.scope.attribute =
  
    attribute scope { db.scope.enumeration }
db.sortas.attribute =
  
    attribute sortas { text }
db.index.type.attribute =
  
    attribute type { text }
div {
  db.itermset.role.attribute = attribute role { text }
  db.itermset.attlist =
    db.itermset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.itermset =
    
        element itermset { db.itermset.attlist, db.indexterm.singular+ }
}
db.indexterm.contentmodel =
  db.primary?,
  ((db.secondary,
    ((db.tertiary, (db.see | db.seealso+)?)
     | db.see
     | db.seealso+)?)
   | db.see
   | db.seealso+)?
div {
  db.indexterm.singular.role.attribute = attribute role { text }
  db.indexterm.singular.class.attribute =
    
        attribute class {
      
            "singular"
    }
  db.indexterm.singular.attlist =
    db.indexterm.singular.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.significance.attribute?
    & db.zone.attribute?
    & db.indexterm.pagenum.attribute?
    & db.scope.attribute?
    & db.index.type.attribute?
    & db.indexterm.singular.class.attribute?
  db.indexterm.singular =
    
        element indexterm {
      db.indexterm.singular.attlist, db.indexterm.contentmodel
    }
}
div {
  db.indexterm.startofrange.role.attribute = attribute role { text }
  db.indexterm.startofrange.class.attribute =
    
        attribute class {
      
            "startofrange"
    }
  db.indexterm.startofrange.attlist =
    db.indexterm.startofrange.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.significance.attribute?
    & db.zone.attribute?
    & db.indexterm.pagenum.attribute?
    & db.scope.attribute?
    & db.index.type.attribute?
    & db.indexterm.startofrange.class.attribute
  db.indexterm.startofrange =
    
        element indexterm {
      db.indexterm.startofrange.attlist, db.indexterm.contentmodel
    }
}
div {
  db.indexterm.endofrange.role.attribute = attribute role { text }
  db.indexterm.endofrange.class.attribute =
    
        attribute class {
      
            "endofrange"
    }
  db.indexterm.endofrange.startref.attribute =
    
        attribute startref { xsd:IDREF }
  db.indexterm.endofrange.attlist =
    db.indexterm.endofrange.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.indexterm.endofrange.class.attribute
    & db.indexterm.endofrange.startref.attribute
  db.indexterm.endofrange =
    
        element indexterm { db.indexterm.endofrange.attlist, empty }
}
div {
  db.indexterm =
    db.indexterm.singular
    | db.indexterm.startofrange
    | db.indexterm.endofrange
}
div {
  db.primary.role.attribute = attribute role { text }
  db.primary.attlist =
    db.primary.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.sortas.attribute?
  db.primary =
    
        element primary { db.primary.attlist, db.all.inlines* }
}
div {
  db.secondary.role.attribute = attribute role { text }
  db.secondary.attlist =
    db.secondary.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.sortas.attribute?
  db.secondary =
    
        element secondary { db.secondary.attlist, db.all.inlines* }
}
div {
  db.tertiary.role.attribute = attribute role { text }
  db.tertiary.attlist =
    db.tertiary.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.sortas.attribute?
  db.tertiary =
    
        element tertiary { db.tertiary.attlist, db.all.inlines* }
}
div {
  db.see.role.attribute = attribute role { text }
  db.see.attlist =
    db.see.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.see =
    
        element see { db.see.attlist, db.all.inlines* }
}
div {
  db.seealso.role.attribute = attribute role { text }
  db.seealso.attlist =
    db.seealso.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.seealso =
    
        element seealso { db.seealso.attlist, db.all.inlines* }
}
div {
  db.index.status.attribute = db.status.attribute
  db.index.role.attribute = attribute role { text }
  db.index.attlist =
    db.index.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.index.status.attribute?
    & db.index.type.attribute?
  db.index.info = db._info
  # 
  # Yes, db.indexdiv* and db.indexentry*; that way an <index/> is valid.
  # Authors can use an empty index to indicate where a generated index should
  # appear.
  db.index =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:index"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element index {
      db.index.attlist,
      db.index.info,
      db.all.blocks*,
      (db.indexdiv* | db.indexentry* | db.segmentedlist)
    }
}
div {
  db.setindex.status.attribute = db.status.attribute
  db.setindex.role.attribute = attribute role { text }
  db.setindex.attlist =
    db.setindex.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.setindex.status.attribute?
    & db.index.type.attribute?
  db.setindex.info = db._info
  db.setindex =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:setindex"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element setindex {
      db.setindex.attlist,
      db.setindex.info,
      db.all.blocks*,
      (db.indexdiv* | db.indexentry*)
    }
}
div {
  db.indexdiv.status.attribute = db.status.attribute
  db.indexdiv.role.attribute = attribute role { text }
  db.indexdiv.attlist =
    db.indexdiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.label.attribute?
    & db.indexdiv.status.attribute?
  db.indexdiv.info = db._info.title.req
  db.indexdiv =
    
        element indexdiv {
      db.indexdiv.attlist,
      db.indexdiv.info,
      db.all.blocks*,
      (db.indexentry+ | db.segmentedlist)
    }
}
div {
  db.indexentry.role.attribute = attribute role { text }
  db.indexentry.attlist =
    db.indexentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.indexentry =
    
        element indexentry {
      db.indexentry.attlist,
      db.primaryie,
      (db.seeie | db.seealsoie)*,
      (db.secondaryie, (db.seeie | db.seealsoie | db.tertiaryie)*)*
    }
}
div {
  db.primaryie.role.attribute = attribute role { text }
  db.primaryie.attlist =
    db.primaryie.role.attribute?
    & db.common.attributes
    & db.linkends.attribute?
  db.primaryie =
    
        element primaryie { db.primaryie.attlist, db.all.inlines* }
}
div {
  db.secondaryie.role.attribute = attribute role { text }
  db.secondaryie.attlist =
    db.secondaryie.role.attribute?
    & db.common.attributes
    & db.linkends.attribute?
  db.secondaryie =
    
        element secondaryie { db.secondaryie.attlist, db.all.inlines* }
}
div {
  db.tertiaryie.role.attribute = attribute role { text }
  db.tertiaryie.attlist =
    db.tertiaryie.role.attribute?
    & db.common.attributes
    & db.linkends.attribute?
  db.tertiaryie =
    
        element tertiaryie { db.tertiaryie.attlist, db.all.inlines* }
}
div {
  db.seeie.role.attribute = attribute role { text }
  db.seeie.attlist =
    db.seeie.role.attribute?
    & db.common.attributes
    & db.linkend.attribute?
  db.seeie =
    
            element seeie { db.seeie.attlist, db.all.inlines* }
}
div {
  db.seealsoie.role.attribute = attribute role { text }
  db.seealsoie.attlist =
    db.seealsoie.role.attribute?
    & db.common.attributes
    & db.linkends.attribute?
  db.seealsoie =
    
            element seealsoie { db.seealsoie.attlist, db.all.inlines* }
}
db.toc.pagenum.attribute =
  
    attribute pagenum { text }
div {
  db.toc.role.attribute = attribute role { text }
  db.toc.attlist =
    db.toc.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.toc.info = db._info.title.only
  db.toc =
    
        [
      s:pattern [
        name = "Root must have version"
        "\x{a}" ~
        "          "
        s:rule [
          context = "/db:toc"
          "\x{a}" ~
          "            "
          s:assert [
            test = "@version"
            "The root element must have a version attribute."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element toc {
      db.toc.attlist,
      db.toc.info,
      db.all.blocks*,
      (db.tocdiv | db.tocentry)*
    }
}
div {
  db.tocdiv.role.attribute = attribute role { text }
  db.tocdiv.pagenum.attribute = db.toc.pagenum.attribute
  db.tocdiv.attlist =
    db.tocdiv.role.attribute?
    & db.common.attributes
    & db.tocdiv.pagenum.attribute?
    & db.linkend.attribute?
  db.tocdiv.info = db._info
  db.tocdiv =
    
        element tocdiv {
      db.tocdiv.attlist,
      db.tocdiv.info,
      db.all.blocks*,
      (db.tocdiv | db.tocentry)+
    }
}
div {
  db.tocentry.role.attribute = attribute role { text }
  db.tocentry.pagenum.attribute = db.toc.pagenum.attribute
  db.tocentry.attlist =
    db.tocentry.role.attribute?
    & db.common.attributes
    & db.tocentry.pagenum.attribute?
    & db.linkend.attribute?
  db.tocentry =
    
        element tocentry { db.tocentry.attlist, db.all.inlines* }
}
db.task.info = db._info.title.req
div {
  db.task.role.attribute = attribute role { text }
  db.task.attlist =
    db.task.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.task =
    
        element task {
      db.task.attlist,
      db.task.info,
      db.tasksummary?,
      db.taskprerequisites?,
      db.procedure,
      db.example*,
      db.taskrelated?
    }
}
div {
  db.tasksummary.role.attribute = attribute role { text }
  db.tasksummary.attlist =
    db.tasksummary.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.tasksummary.info = db._info.title.only
  db.tasksummary =
    
        element tasksummary {
      db.tasksummary.attlist, db.tasksummary.info, db.all.blocks+
    }
}
div {
  db.taskprerequisites.role.attribute = attribute role { text }
  db.taskprerequisites.attlist =
    db.taskprerequisites.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.taskprerequisites.info = db._info.title.only
  db.taskprerequisites =
    
        element taskprerequisites {
      db.taskprerequisites.attlist,
      db.taskprerequisites.info,
      db.all.blocks+
    }
}
div {
  db.taskrelated.role.attribute = attribute role { text }
  db.taskrelated.attlist =
    db.taskrelated.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.taskrelated.info = db._info.title.only
  db.taskrelated =
    
        element taskrelated {
      db.taskrelated.attlist, db.taskrelated.info, db.all.blocks+
    }
}
db.area.units.enumeration =
  
    "calspair"
  | 
        "linecolumn"
  | 
        "linecolumnpair"
  | 
        "linerange"
db.area.units-enum.attribute =
  
        attribute units { db.area.units.enumeration }?
db.area.units-other.attributes =
  
        attribute units {
    
        "other"
  }?,
  
          attribute otherunits { xsd:NMTOKEN }
db.area.units.attribute =
  db.area.units-enum.attribute | db.area.units-other.attributes
div {
  db.calloutlist.role.attribute = attribute role { text }
  db.calloutlist.attlist =
    db.calloutlist.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.calloutlist.info = db._info.title.only
  db.calloutlist =
    
            element calloutlist {
      db.calloutlist.attlist,
      db.calloutlist.info,
      db.all.blocks*,
      db.callout+
    }
}
div {
  db.callout.role.attribute = attribute role { text }
  db.callout.arearefs.attribute =
    
        attribute arearefs { xsd:IDREFS }
  db.callout.attlist =
    db.callout.role.attribute?
    & db.common.attributes
    & db.callout.arearefs.attribute
  db.callout =
    
            element callout { db.callout.attlist, db.all.blocks+ }
}
div {
  db.programlistingco.role.attribute = attribute role { text }
  db.programlistingco.attlist =
    db.programlistingco.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.programlistingco.info = db._info.title.forbidden
  db.programlistingco =
    
        element programlistingco {
      db.programlistingco.attlist,
      db.programlistingco.info,
      db.areaspec,
      db.programlisting,
      db.calloutlist*
    }
}
div {
  db.areaspec.role.attribute = attribute role { text }
  db.areaspec.attlist =
    db.areaspec.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.area.units.attribute
  db.areaspec =
    
        element areaspec { db.areaspec.attlist, (db.area | db.areaset)+ }
}
div {
  db.area.role.attribute = attribute role { text }
  db.area.linkends.attribute =
    
            attribute linkends { xsd:IDREFS }
  db.area.label.attribute =
    
        attribute label { text }
  db.area.coords.attribute =
    
            attribute coords { text }
  db.area.attlist =
    db.area.role.attribute?
    & db.common.idreq.attributes
    & db.area.units.attribute
    & (db.area.linkends.attribute | db.href.attributes)?
    & db.area.label.attribute?
    & db.area.coords.attribute
  db.area =
    
        element area { db.area.attlist, db.alt? }
}
div {
  # The only difference is that xml:id is optional
  db.area.inareaset.attlist =
    db.area.role.attribute?
    & db.common.attributes
    & db.area.units.attribute
    & (db.area.linkends.attribute | db.href.attributes)?
    & db.area.label.attribute?
    & db.area.coords.attribute
  db.area.inareaset =
    
        element area { db.area.inareaset.attlist, db.alt? }
}
div {
  db.areaset.role.attribute = attribute role { text }
  db.areaset.linkends.attribute = db.linkends.attribute
  db.areaset.label.attribute = db.label.attribute
  db.areaset.attlist =
    db.areaset.role.attribute?
    & db.common.idreq.attributes
    & db.area.units.attribute
    & (db.areaset.linkends.attribute | db.href.attributes)?
    & db.areaset.label.attribute?
  db.areaset =
    
        element areaset { db.areaset.attlist, db.area.inareaset+ }
}
div {
  db.screenco.role.attribute = attribute role { text }
  db.screenco.attlist =
    db.screenco.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.screenco.info = db._info.title.forbidden
  db.screenco =
    
        element screenco {
      db.screenco.attlist,
      db.screenco.info,
      db.areaspec,
      db.screen,
      db.calloutlist*
    }
}
div {
  db.imageobjectco.role.attribute = attribute role { text }
  db.imageobjectco.attlist =
    db.imageobjectco.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.imageobjectco.info = db._info.title.forbidden
  db.imageobjectco =
    
        element imageobjectco {
      db.imageobjectco.attlist,
      db.imageobjectco.info,
      db.areaspec,
      db.imageobject+,
      db.calloutlist*
    }
}
div {
  db.co.role.attribute = attribute role { text }
  db.co.linkends.attribute = db.linkends.attribute
  db.co.label.attribute = db.label.attribute
  db.co.attlist =
    db.co.role.attribute?
    & db.common.idreq.attributes
    & db.co.linkends.attribute?
    & db.co.label.attribute?
  db.co =
    
        element co { db.co.attlist, empty }
}
div {
  db.coref.role.attribute = attribute role { text }
  db.coref.label.attribute = db.label.attribute
  db.coref.attlist =
    db.coref.role.attribute?
    & db.common.attributes
    & db.linkend.attribute
    & db.coref.label.attribute?
  db.coref =
    
        element coref { db.coref.attlist, empty }
}
div {
  db.productionset.role.attribute = attribute role { text }
  db.productionset.attlist =
    db.productionset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.productionset.info = db._info.title.only
  db.productionset =
    
        element productionset {
      db.productionset.attlist,
      db.productionset.info,
      (db.production | db.productionrecap)+
    }
}
div {
  db.production.role.attribute = attribute role { text }
  db.production.attlist =
    db.production.role.attribute?
    & db.common.idreq.attributes
    & db.common.linking.attributes
  db.production =
    
        element production {
      db.production.attlist, db.lhs, db.rhs, db.constraint*
    }
}
div {
  db.lhs.role.attribute = attribute role { text }
  db.lhs.attlist =
    db.lhs.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.lhs =
    
        element lhs { db.lhs.attlist, text }
}
div {
  db.rhs.role.attribute = attribute role { text }
  db.rhs.attlist =
    db.rhs.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.rhs =
    
        element rhs {
      db.rhs.attlist,
      (text | db.nonterminal | db.lineannotation | db.sbr)*
    }
}
div {
  db.nonterminal.role.attribute = attribute role { text }
  db.nonterminal.def.attribute =
    
                attribute def { xsd:anyURI }
  db.nonterminal.attlist =
    db.nonterminal.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.nonterminal.def.attribute
  db.nonterminal =
    
        element nonterminal { db.nonterminal.attlist, text }
}
div {
  db.constraint.role.attribute = attribute role { text }
  db.constraint.attlist =
    db.constraint.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
  db.constraint =
    
        element constraint { db.constraint.attlist, empty }
}
div {
  db.productionrecap.role.attribute = attribute role { text }
  db.productionrecap.attlist =
    db.productionrecap.role.attribute?
    & db.common.attributes
    & db.common.req.linking.attributes
  db.productionrecap =
    
        element productionrecap { db.productionrecap.attlist, empty }
}
div {
  db.constraintdef.role.attribute = attribute role { text }
  db.constraintdef.attlist =
    db.constraintdef.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.constraintdef.info = db._info.title.only
  db.constraintdef =
    
        element constraintdef {
      db.constraintdef.attlist, db.constraintdef.info, db.all.blocks+
    }
}
db.char.attribute =
  
        attribute char { text }
db.charoff.attribute =
  
          attribute charoff {
    xsd:decimal { minExclusive = "0" maxExclusive = "100" }
  }
db.frame.attribute =
  
    attribute frame {
    
        "all"
    | 
            "bottom"
    | 
            "none"
    | 
            "sides"
    | 
            "top"
    | 
            "topbot"
  }
db.colsep.attribute =
  
    attribute colsep {
    
        "0"
    | 
            "1"
  }
db.rowsep.attribute =
  
    attribute rowsep {
    
        "0"
    | 
            "1"
  }
db.orient.attribute =
  
    attribute orient {
    
        "land"
    | 
            "port"
  }
db.tabstyle.attribute =
  
    attribute tabstyle { text }
db.rowheader.attribute =
  
    attribute rowheader {
    
        "firstcol"
    | 
            "norowheader"
  }
db.align.attribute =
  
    attribute align {
    
        "center"
    | 
            "char"
    | 
            "justify"
    | 
            "left"
    | 
            "right"
  }
db.valign.attribute =
  
    attribute valign {
    
        "bottom"
    | 
            "middle"
    | 
            "top"
  }
db.specify-col-by-colname.attributes =
  
    attribute colname { text }
db.specify-col-by-namest.attributes =
  
    attribute namest { text }
db.specify-span-by-spanspec.attributes =
  
    attribute spanname { text }
db.specify-span-directly.attributes =
  
    attribute namest { text }
  & 
        attribute nameend { text }
db.column-spec.attributes =
  db.specify-col-by-colname.attributes
  | db.specify-col-by-namest.attributes
  | db.specify-span-by-spanspec.attributes
  | db.specify-span-directly.attributes
db.colname.attribute =
  
    attribute colname { text }
db.spanname.attribute =
  
    attribute spanname { text }
div {
  db.tgroup.role.attribute = attribute role { text }
  db.tgroup.tgroupstyle.attribute =
    
        attribute tgroupstyle { text }
  db.tgroup.cols.attribute =
    
        attribute cols { xsd:positiveInteger }
  db.tgroup.attlist =
    db.tgroup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.char.attribute?
    & db.charoff.attribute?
    & db.tgroup.tgroupstyle.attribute?
    & db.tgroup.cols.attribute
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.tgroup =
    
        element tgroup {
      db.tgroup.attlist,
      db.colspec*,
      db.spanspec*,
      db.cals.thead?,
      db.cals.tfoot?,
      db.cals.tbody
    }
}
div {
  db.colspec.role.attribute = attribute role { text }
  db.colspec.colnum.attribute =
    
        attribute colnum { xsd:positiveInteger }
  db.colspec.colwidth.attribute =
    
        attribute colwidth { text }
  db.colspec.attlist =
    db.colspec.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.colspec.colnum.attribute?
    & db.char.attribute?
    & db.colsep.attribute?
    & db.colspec.colwidth.attribute?
    & db.charoff.attribute?
    & db.colname.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.colspec =
    
        element colspec { db.colspec.attlist, empty }
}
div {
  db.spanspec.role.attribute = attribute role { text }
  db.spanspec.namest.attribute =
    
        attribute namest { text }
  db.spanspec.nameend.attribute =
    
        attribute nameend { text }
  db.spanspec.attlist =
    db.spanspec.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.spanname.attribute
    & db.spanspec.namest.attribute
    & db.spanspec.nameend.attribute
    & db.char.attribute?
    & db.colsep.attribute?
    & db.charoff.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.spanspec =
    
        element spanspec { db.spanspec.attlist, empty }
}
div {
  db.cals.thead.role.attribute = attribute role { text }
  db.cals.thead.attlist =
    db.cals.thead.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.thead =
    
        element thead { db.cals.thead.attlist, db.colspec*, db.row+ }
}
div {
  db.cals.tfoot.role.attribute = attribute role { text }
  db.cals.tfoot.attlist =
    db.cals.tfoot.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.tfoot =
    
        element tfoot { db.cals.tfoot.attlist, db.colspec*, db.row+ }
}
div {
  db.cals.tbody.role.attribute = attribute role { text }
  db.cals.tbody.attlist =
    db.cals.tbody.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.tbody =
    
        element tbody { db.cals.tbody.attlist, db.row+ }
}
div {
  db.row.role.attribute = attribute role { text }
  db.row.attlist =
    db.row.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.rowsep.attribute?
    & db.valign.attribute?
  db.row =
    
        element row { db.row.attlist, (db.entry | db.entrytbl)+ }
}
div {
  db.entry.role.attribute = attribute role { text }
  db.entry.morerows.attribute =
    
        attribute morerows { xsd:integer }
  db.entry.rotate.attribute =
    
        attribute rotate {
      
            "0"
      | 
                "1"
    }
  db.entry.attlist =
    db.entry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
    & db.char.attribute?
    & db.colsep.attribute?
    & db.charoff.attribute?
    & db.entry.morerows.attribute?
    & db.column-spec.attributes?
    & db.rowsep.attribute?
    & db.entry.rotate.attribute?
    & db.align.attribute?
  db.entry =
    
        element entry {
      db.entry.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
div {
  db.entrytbl.role.attribute = attribute role { text }
  db.entrytbl.tgroupstyle.attribute =
    
        attribute tgroupstyle { text }
  db.entrytbl.cols.attribute =
    
        attribute cols { xsd:positiveInteger }
  db.entrytbl.attlist =
    db.entrytbl.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.char.attribute?
    & db.charoff.attribute?
    & db.column-spec.attributes?
    & db.entrytbl.tgroupstyle.attribute?
    & db.entrytbl.cols.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.align.attribute?
  db.entrytbl =
    
        element entrytbl {
      db.entrytbl.attlist,
      db.colspec*,
      db.spanspec*,
      db.cals.entrytbl.thead?,
      db.cals.entrytbl.tbody
    }
}
div {
  db.cals.entrytbl.thead.role.attribute = attribute role { text }
  db.cals.entrytbl.thead.attlist =
    db.cals.entrytbl.thead.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.entrytbl.thead =
    
        element thead {
      db.cals.entrytbl.thead.attlist, db.colspec*, db.entrytbl.row+
    }
}
div {
  db.cals.entrytbl.tbody.role.attribute = attribute role { text }
  db.cals.entrytbl.tbody.attlist =
    db.cals.entrytbl.tbody.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.valign.attribute?
  db.cals.entrytbl.tbody =
    
        element tbody { db.cals.entrytbl.tbody.attlist, db.entrytbl.row+ }
}
div {
  db.entrytbl.row.role.attribute = attribute role { text }
  db.entrytbl.row.attlist =
    db.entrytbl.row.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.rowsep.attribute?
    & db.valign.attribute?
  db.entrytbl.row =
    
        element row { db.entrytbl.row.attlist, db.entry+ }
}
div {
  db.cals.table.role.attribute = attribute role { text }
  db.cals.table.label.attribute = db.label.attribute
  db.cals.table.attlist =
    db.cals.table.role.attribute?
    & db.cals.table.label.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
    & db.orient.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.frame.attribute?
    & db.pgwide.attribute?
    & 
            attribute shortentry {
        
                "0"
        | 
                    "1"
      }?
    & 
            attribute tocentry {
        
                "0"
        | 
                    "1"
      }?
    & db.rowheader.attribute?
  db.cals.table.info = db._info.title.onlyreq
  db.cals.table =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:informaltable)"
            "informaltable must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element table {
      db.cals.table.attlist,
      db.cals.table.info,
      (db.alt? & db.indexing.inlines* & db.textobject*),
      (db.mediaobject+ | db.tgroup+),
      db.caption?
    }
}
div {
  db.cals.informaltable.role.attribute = attribute role { text }
  db.cals.informaltable.attlist =
    db.cals.informaltable.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
    & db.orient.attribute?
    & db.colsep.attribute?
    & db.rowsep.attribute?
    & db.frame.attribute?
    & db.pgwide.attribute?
    & db.rowheader.attribute?
  db.cals.informaltable.info = db._info.title.forbidden
  db.cals.informaltable =
    
        element informaltable {
      db.cals.informaltable.attlist,
      db.cals.informaltable.info,
      (db.alt? & db.indexing.inlines* & db.textobject*),
      (db.mediaobject+ | db.tgroup+),
      db.caption?
    }
}
db.html.coreattrs =
  
    attribute class { text }?
  & 
        attribute style { text }?
  & 
        attribute title { text }?
db.html.i18n =
  
    attribute lang { text }?
db.html.events =
  
    attribute onclick { text }?
  & 
        attribute ondblclick { text }?
  & 
        attribute onmousedown { text }?
  & 
        attribute onmouseup { text }?
  & 
        attribute onmouseover { text }?
  & 
        attribute onmousemove { text }?
  & 
        attribute onmouseout { text }?
  & 
        attribute onkeypress { text }?
  & 
        attribute onkeydown { text }?
  & 
        attribute onkeyup { text }?
db.html.attrs =
  db.common.attributes
  & db.html.coreattrs
  & db.html.i18n
  & db.html.events
db.html.cellhalign =
  
    attribute align {
    
        "left"
    | 
            "center"
    | 
            "right"
    | 
            "justify"
    | 
            "char"
  }?
  & 
        attribute char { text }?
  & 
        attribute charoff {
      xsd:integer
      | xsd:string { pattern = "[0-9]+%" }
    }?
db.html.cellvalign =
  
    attribute valign {
    
        "top"
    | 
            "middle"
    | 
            "bottom"
    | 
            "baseline"
  }?
db.html.table.attributes =
  
    attribute summary { text }?
  & 
        attribute width {
      xsd:integer
      | xsd:string { pattern = "[0-9]+%" }
    }?
  & 
        attribute border { xsd:nonNegativeInteger }?
  & 
        attribute frame {
      
            "void"
      | 
                "above"
      | 
                "below"
      | 
                "hsides"
      | 
                "lhs"
      | 
                "rhs"
      | 
                "vsides"
      | 
                "box"
      | 
                "border"
    }?
  & 
        attribute rules {
      
            "none"
      | 
                "groups"
      | 
                "rows"
      | 
                "cols"
      | 
                "all"
    }?
  & 
        attribute cellspacing {
      xsd:integer
      | xsd:string { pattern = "[0-9]+%" }
    }?
  & 
        attribute cellpadding {
      xsd:integer
      | xsd:string { pattern = "[0-9]+%" }
    }?
db.html.tablecell.attributes =
  
    attribute abbr { text }?
  & 
        attribute axis { text }?
  & 
        attribute headers { text }?
  & 
        attribute scope {
      
            "row"
      | 
                "col"
      | 
                "rowgroup"
      | 
                "colgroup"
    }?
  & 
                            attribute rowspan { xsd:nonNegativeInteger }?
  & 
                    attribute colspan { xsd:nonNegativeInteger }?
db.html.table.info = db._info.title.forbidden
db.html.table.model =
  db.html.table.info?,
  db.html.caption,
  (db.html.col* | db.html.colgroup*),
  db.html.thead?,
  db.html.tfoot?,
  (db.html.tbody+ | db.html.tr+)
db.html.informaltable.info = db._info.title.forbidden
db.html.informaltable.model =
  db.html.informaltable.info?,
  (db.html.col* | db.html.colgroup*),
  db.html.thead?,
  db.html.tfoot?,
  (db.html.tbody+ | db.html.tr+)
div {
  db.html.table.role.attribute = attribute role { text }
  db.html.table.label.attribute = db.label.attribute
  db.html.table.attlist =
    db.html.attrs
    & db.html.table.attributes
    & db.html.table.role.attribute?
    & db.html.table.label.attribute?
    & db.orient.attribute?
    & db.pgwide.attribute?
    & db.tabstyle.attribute?
    & db.floatstyle.attribute?
  db.html.table =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:informaltable)"
            "informaltable must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:table"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of table"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element table { db.html.table.attlist, db.html.table.model }
}
div {
  db.html.informaltable.attlist =
    db.html.attrs & db.html.table.attributes
  db.html.informaltable =
    
        element informaltable {
      db.html.informaltable.attlist, db.html.informaltable.model
    }
}
div {
  db.html.caption.attlist = db.html.attrs
  db.html.caption =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:sidebar)"
            "sidebar must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:task)"
            "task must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caption"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of caption"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element caption { db.html.caption.attlist, db.all.inlines* }
}
div {
  db.html.col.attlist =
    db.html.attrs
    & 
                                    attribute span { xsd:nonNegativeInteger }?
    & 
                              attribute width { text }?
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.col =
    
        element col { db.html.col.attlist, empty }
}
div {
  db.html.colgroup.attlist =
    db.html.attrs
    & 
                                    attribute span { xsd:nonNegativeInteger }?
    & 
                              attribute width { text }?
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.colgroup =
    
        element colgroup { db.html.colgroup.attlist, db.html.col* }
}
div {
  db.html.thead.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.thead =
    
        element thead { db.html.thead.attlist, db.html.tr+ }
}
div {
  db.html.tfoot.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tfoot =
    
        element tfoot { db.html.tfoot.attlist, db.html.tr+ }
}
div {
  db.html.tbody.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tbody =
    
        element tbody { db.html.tbody.attlist, db.html.tr+ }
}
div {
  db.html.tr.attlist =
    db.html.attrs & db.html.cellhalign & db.html.cellvalign
  db.html.tr =
    
        element tr { db.html.tr.attlist, (db.html.th | db.html.td)+ }
}
div {
  db.html.th.attlist =
    db.html.attrs
    & db.html.tablecell.attributes
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.th =
    
        element th {
      db.html.th.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
div {
  db.html.td.attlist =
    db.html.attrs
    & db.html.tablecell.attributes
    & db.html.cellhalign
    & db.html.cellvalign
  db.html.td =
    
        element td {
      db.html.td.attlist, (db.all.inlines* | db.all.blocks*)
    }
}
div {
  db.msgset.role.attribute = attribute role { text }
  db.msgset.attlist =
    db.msgset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgset.info = db._info.title.only
  db.msgset =
    
        element msgset {
      db.msgset.attlist,
      db.msgset.info,
      (db.msgentry+ | db.simplemsgentry+)
    }
}
div {
  db.msgentry.role.attribute = attribute role { text }
  db.msgentry.attlist =
    db.msgentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgentry =
    
        element msgentry {
      db.msgentry.attlist, db.msg+, db.msginfo?, db.msgexplan*
    }
}
div {
  db.simplemsgentry.role.attribute = attribute role { text }
  db.simplemsgentry.msgaud.attribute =
    
        attribute msgaud { text }
  db.simplemsgentry.msgorig.attribute =
    
        attribute msgorig { text }
  db.simplemsgentry.msglevel.attribute =
    
        attribute msglevel { text }
  db.simplemsgentry.attlist =
    db.simplemsgentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.simplemsgentry.msgaud.attribute?
    & db.simplemsgentry.msgorig.attribute?
    & db.simplemsgentry.msglevel.attribute?
  db.simplemsgentry =
    
        element simplemsgentry {
      db.simplemsgentry.attlist, db.msgtext, db.msgexplan+
    }
}
div {
  db.msg.role.attribute = attribute role { text }
  db.msg.attlist =
    db.msg.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msg.info = db._info.title.only
  db.msg =
    
        element msg {
      db.msg.attlist, db.msg.info, db.msgmain, (db.msgsub | db.msgrel)*
    }
}
div {
  db.msgmain.role.attribute = attribute role { text }
  db.msgmain.attlist =
    db.msgmain.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgmain.info = db._info.title.only
  db.msgmain =
    
        element msgmain { db.msgmain.attlist, db.msgmain.info, db.msgtext }
}
div {
  db.msgsub.role.attribute = attribute role { text }
  db.msgsub.attlist =
    db.msgsub.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgsub.info = db._info.title.only
  db.msgsub =
    
        element msgsub { db.msgsub.attlist, db.msgsub.info, db.msgtext }
}
div {
  db.msgrel.role.attribute = attribute role { text }
  db.msgrel.attlist =
    db.msgrel.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgrel.info = db._info.title.only
  db.msgrel =
    
        element msgrel { db.msgrel.attlist, db.msgrel.info, db.msgtext }
}
div {
  db.msgtext.role.attribute = attribute role { text }
  db.msgtext.attlist =
    db.msgtext.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgtext =
    
        element msgtext { db.msgtext.attlist, db.all.blocks+ }
}
div {
  db.msginfo.role.attribute = attribute role { text }
  db.msginfo.attlist =
    db.msginfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msginfo =
    
        element msginfo {
      db.msginfo.attlist, (db.msglevel | db.msgorig | db.msgaud)*
    }
}
div {
  db.msglevel.role.attribute = attribute role { text }
  db.msglevel.attlist =
    db.msglevel.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msglevel =
    
        element msglevel { db.msglevel.attlist, db._text }
}
div {
  db.msgorig.role.attribute = attribute role { text }
  db.msgorig.attlist =
    db.msgorig.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgorig =
    
        element msgorig { db.msgorig.attlist, db._text }
}
div {
  db.msgaud.role.attribute = attribute role { text }
  db.msgaud.attlist =
    db.msgaud.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgaud =
    
        element msgaud { db.msgaud.attlist, db._text }
}
div {
  db.msgexplan.role.attribute = attribute role { text }
  db.msgexplan.attlist =
    db.msgexplan.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.msgexplan.info = db._info.title.only
  db.msgexplan =
    
        element msgexplan {
      db.msgexplan.attlist, db.msgexplan.info, db.all.blocks+
    }
}
div {
  db.qandaset.role.attribute = attribute role { text }
  db.qandaset.defaultlabel.enumeration =
    
        "none"
    | 
            "number"
    | 
            "qanda"
  db.qandaset.defaultlabel.attribute =
    
        attribute defaultlabel { db.qandaset.defaultlabel.enumeration }
  db.qandaset.attlist =
    db.qandaset.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.qandaset.defaultlabel.attribute?
  db.qandaset.info = db._info.title.only
  db.qandaset =
    
        element qandaset {
      db.qandaset.attlist,
      db.qandaset.info,
      db.all.blocks*,
      (db.qandadiv+ | db.qandaentry+)
    }
}
div {
  db.qandadiv.role.attribute = attribute role { text }
  db.qandadiv.attlist =
    db.qandadiv.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.qandadiv.info = db._info.title.only
  db.qandadiv =
    
        element qandadiv {
      db.qandadiv.attlist,
      db.qandadiv.info,
      db.all.blocks*,
      (db.qandadiv+ | db.qandaentry+)
    }
}
div {
  db.qandaentry.role.attribute = attribute role { text }
  db.qandaentry.attlist =
    db.qandaentry.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.qandaentry.info = db._info.title.only
  db.qandaentry =
    
        element qandaentry {
      db.qandaentry.attlist, db.qandaentry.info, db.question, db.answer*
    }
}
div {
  db.question.role.attribute = attribute role { text }
  db.question.attlist =
    db.question.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.question =
    
        element question { db.question.attlist, db.label?, db.all.blocks+ }
}
div {
  db.answer.role.attribute = attribute role { text }
  db.answer.attlist =
    db.answer.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.answer =
    
        element answer { db.answer.attlist, db.label?, db.all.blocks+ }
}
div {
  db.label.role.attribute = attribute role { text }
  db.label.attlist =
    db.label.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.label =
    
        element label { db.label.attlist, db._text }
}
db.math.inlines = db.inlineequation
db.equation.content = (db.mediaobject+ | db.mathphrase+) | db._any.mml+
db.inlineequation.content =
  (db.inlinemediaobject+ | db.mathphrase+) | db._any.mml+
div {
  db.equation.role.attribute = attribute role { text }
  db.equation.label.attribute = db.label.attribute
  db.equation.attlist =
    db.equation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.equation.label.attribute?
    & db.pgwide.attribute?
    & db.floatstyle.attribute?
  db.equation.info = db._info.title.only
  db.equation =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:example)"
            "example must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:figure)"
            "figure must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:table)"
            "table must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:equation)"
            "equation must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:equation"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of equation"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element equation {
      db.equation.attlist,
      db.equation.info,
      db.alt?,
      db.equation.content,
      db.caption?
    }
}
div {
  db.informalequation.role.attribute = attribute role { text }
  db.informalequation.attlist =
    db.informalequation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.informalequation.info = db._info.title.forbidden
  db.informalequation =
    
        element informalequation {
      db.informalequation.attlist,
      db.informalequation.info,
      db.alt?,
      db.equation.content,
      db.caption?
    }
}
div {
  db.inlineequation.role.attribute = attribute role { text }
  db.inlineequation.attlist =
    db.inlineequation.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.inlineequation =
    
        element inlineequation {
      db.inlineequation.attlist, db.alt?, db.inlineequation.content
    }
}
div {
  db.mathphrase.role.attribute = attribute role { text }
  db.mathphrase.attlist =
    db.mathphrase.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.mathphrase =
    
        element mathphrase {
      db.mathphrase.attlist,
      (db._text | db.ubiq.inlines | db._emphasis)*
    }
}
div {
  db.imagedata.mathml.role.attribute = attribute role { text }
  db.imagedata.mathml.attlist =
    db.imagedata.mathml.role.attribute?
    & db.common.attributes
    & 
            attribute format {
        
                "mathml"
      }?
    & db.imagedata.align.attribute?
    & db.imagedata.valign.attribute?
    & db.imagedata.width.attribute?
    & db.imagedata.contentwidth.attribute?
    & db.imagedata.scalefit.attribute?
    & db.imagedata.scale.attribute?
    & db.imagedata.depth.attribute?
    & db.imagedata.contentdepth.attribute?
  db.imagedata.mathml.info = db._info.title.forbidden
  db.imagedata.mathml =
    
        element imagedata {
      db.imagedata.mathml.attlist,
      db.imagedata.mathml.info,
      db._any.mml+
    }
}
div {
  db._any.mml =
    
        element mml:* { (db._any.attribute | text | db._any)* }
}
div {
  db.imagedata.svg.role.attribute = attribute role { text }
  db.imagedata.svg.attlist =
    db.imagedata.svg.role.attribute?
    & db.common.attributes
    & 
            attribute format {
        
                "svg"
      }?
    & db.imagedata.align.attribute?
    & db.imagedata.valign.attribute?
    & db.imagedata.width.attribute?
    & db.imagedata.contentwidth.attribute?
    & db.imagedata.scalefit.attribute?
    & db.imagedata.scale.attribute?
    & db.imagedata.depth.attribute?
    & db.imagedata.contentdepth.attribute?
  db.imagedata.svg.info = db._info.title.forbidden
  db.imagedata.svg =
    
        element imagedata {
      db.imagedata.svg.attlist, db.imagedata.svg.info, db._any.svg+
    }
}
div {
  db._any.svg =
    
        element svg:* { (db._any.attribute | text | db._any)* }
}
db.markup.inlines =
  db.tag
  | db.markup
  | db.token
  | db.symbol
  | db.literal
  | db.code
  | db.constant
  | db.email
  | db.uri
div {
  db.markup.role.attribute = attribute role { text }
  db.markup.attlist =
    db.markup.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.markup =
    
        element markup { db.markup.attlist, db._text }
}
div {
  db.tag.role.attribute = attribute role { text }
  db.tag.class.enumeration =
    
        "attribute"
    | 
            "attvalue"
    | 
            "element"
    | 
            "emptytag"
    | 
            "endtag"
    | 
            "genentity"
    | 
            "localname"
    | 
            "namespace"
    | 
            "numcharref"
    | 
            "paramentity"
    | 
            "pi"
    | 
            "prefix"
    | 
            "comment"
    | 
            "starttag"
    | 
            "xmlpi"
  db.tag.class.attribute =
    
        attribute class { db.tag.class.enumeration }
  db.tag.namespace.attribute =
    
        attribute namespace { xsd:anyURI }
  db.tag.attlist =
    db.tag.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.tag.class.attribute?
    & db.tag.namespace.attribute?
  db.tag =
    
        element tag { db.tag.attlist, db._text }
}
div {
  db.symbol.class.attribute =
    
        attribute class {
      
            "limit"
    }
  db.symbol.role.attribute = attribute role { text }
  db.symbol.attlist =
    db.symbol.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.symbol.class.attribute?
  db.symbol =
    
        element symbol { db.symbol.attlist, db._text }
}
div {
  db.token.role.attribute = attribute role { text }
  db.token.attlist =
    db.token.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.token =
    
        element token { db.token.attlist, db._text }
}
div {
  db.literal.role.attribute = attribute role { text }
  db.literal.attlist =
    db.literal.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.literal =
    
        element literal { db.literal.attlist, db._text }
}
div {
  code.language.attribute =
    
        attribute language { text }
  db.code.role.attribute = attribute role { text }
  db.code.attlist =
    db.code.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & code.language.attribute?
  db.code =
    
        element code {
      db.code.attlist, (db.programming.inlines | db._text)*
    }
}
div {
  db.constant.class.attribute =
    
        attribute class {
      
            "limit"
    }
  db.constant.role.attribute = attribute role { text }
  db.constant.attlist =
    db.constant.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.constant.class.attribute?
  db.constant =
    
        element constant { db.constant.attlist, db._text }
}
div {
  db.productname.role.attribute = attribute role { text }
  db.productname.class.enumeration =
    
        "copyright"
    | 
            "registered"
    | 
            "service"
    | 
            "trade"
  db.productname.class.attribute =
    
        attribute class { db.productname.class.enumeration }
  db.productname.attlist =
    db.productname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.productname.class.attribute?
  db.productname =
    
        element productname { db.productname.attlist, db._text }
}
div {
  db.productnumber.role.attribute = attribute role { text }
  db.productnumber.attlist =
    db.productnumber.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.productnumber =
    
        element productnumber { db.productnumber.attlist, db._text }
}
div {
  db.database.class.enumeration =
    
        "altkey"
    | 
            "constraint"
    | 
            "datatype"
    | 
            "field"
    | 
            "foreignkey"
    | 
            "group"
    | 
            "index"
    | 
            "key1"
    | 
            "key2"
    | 
            "name"
    | 
            "primarykey"
    | 
            "procedure"
    | 
            "record"
    | 
            "rule"
    | 
            "secondarykey"
    | 
            "table"
    | 
            "user"
    | 
            "view"
  db.database.class.attribute =
    
        attribute class { db.database.class.enumeration }
  db.database.role.attribute = attribute role { text }
  db.database.attlist =
    db.database.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.database.class.attribute?
  db.database =
    
        element database { db.database.attlist, db._text }
}
div {
  db.application.class.enumeration =
    
        "hardware"
    | 
            "software"
  db.application.class.attribute =
    
        attribute class { db.application.class.enumeration }
  db.application.role.attribute = attribute role { text }
  db.application.attlist =
    db.application.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.application.class.attribute?
  db.application =
    
        element application { db.application.attlist, db._text }
}
div {
  db.hardware.role.attribute = attribute role { text }
  db.hardware.attlist =
    db.hardware.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.hardware =
    
        element hardware { db.hardware.attlist, db._text }
}
db.gui.inlines =
  db.guiicon
  | db.guibutton
  | db.guimenuitem
  | db.guimenu
  | db.guisubmenu
  | db.guilabel
  | db.menuchoice
  | db.mousebutton
div {
  db.guibutton.role.attribute = attribute role { text }
  db.guibutton.attlist =
    db.guibutton.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guibutton =
    
        element guibutton {
      db.guibutton.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.guiicon.role.attribute = attribute role { text }
  db.guiicon.attlist =
    db.guiicon.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guiicon =
    
        element guiicon {
      db.guiicon.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.guilabel.role.attribute = attribute role { text }
  db.guilabel.attlist =
    db.guilabel.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guilabel =
    
        element guilabel {
      db.guilabel.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.guimenu.role.attribute = attribute role { text }
  db.guimenu.attlist =
    db.guimenu.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guimenu =
    
        element guimenu {
      db.guimenu.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.guimenuitem.role.attribute = attribute role { text }
  db.guimenuitem.attlist =
    db.guimenuitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guimenuitem =
    
        element guimenuitem {
      db.guimenuitem.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.guisubmenu.role.attribute = attribute role { text }
  db.guisubmenu.attlist =
    db.guisubmenu.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.guisubmenu =
    
        element guisubmenu {
      db.guisubmenu.attlist,
      (db._text | db.accel | db.superscript | db.subscript)*
    }
}
div {
  db.menuchoice.role.attribute = attribute role { text }
  db.menuchoice.attlist =
    db.menuchoice.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.menuchoice =
    
        element menuchoice {
      db.menuchoice.attlist,
      db.shortcut?,
      (db.guibutton
       | db.guiicon
       | db.guilabel
       | db.guimenu
       | db.guimenuitem
       | db.guisubmenu)+
    }
}
div {
  db.mousebutton.role.attribute = attribute role { text }
  db.mousebutton.attlist =
    db.mousebutton.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.mousebutton =
    
        element mousebutton { db.mousebutton.attlist, db._text }
}
db.keyboard.inlines =
  db.keycombo
  | db.keycap
  | db.keycode
  | db.keysym
  | db.shortcut
  | db.accel
div {
  db.keycap.function.enumeration =
    
        "alt"
    | 
            "backspace"
    | 
            "command"
    | 
            "control"
    | 
            "delete"
    | 
            "down"
    | 
            "end"
    | 
            "enter"
    | 
            "escape"
    | 
            "home"
    | 
            "insert"
    | 
            "left"
    | 
            "meta"
    | 
            "option"
    | 
            "pagedown"
    | 
            "pageup"
    | 
            "right"
    | 
            "shift"
    | 
            "space"
    | 
            "tab"
    | 
            "up"
  db.keycap.function-enum.attribute =
    
        attribute function { db.keycap.function.enumeration }?
  db.keycap.function-other.attributes =
    
        attribute function {
      
            "other"
    }?,
    
        attribute otherfunction { text }
  db.keycap.function.attrib =
    db.keycap.function-enum.attribute
    | db.keycap.function-other.attributes
  db.keycap.role.attribute = attribute role { text }
  db.keycap.attlist =
    db.keycap.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.keycap.function.attrib
  db.keycap =
    
        element keycap { db.keycap.attlist, db._text }
}
div {
  db.keycode.role.attribute = attribute role { text }
  db.keycode.attlist =
    db.keycode.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keycode =
    
        element keycode { db.keycode.attlist, db._text }
}
db.keycombination.contentmodel =
  (db.keycap | db.keycombo | db.keysym) | db.mousebutton
div {
  db.keycombo.action.enumeration =
    
        "click"
    | 
            "double-click"
    | 
            "press"
    | 
            "seq"
    | 
            "simul"
  db.keycombo.action-enum.attribute =
    
                attribute action { db.keycombo.action.enumeration }?
  db.keycombo.action-other.attributes =
    
        attribute action {
      
            "other"
    }?,
    
        attribute otheraction { text }
  db.keycombo.action.attrib =
    db.keycombo.action-enum.attribute
    | db.keycombo.action-other.attributes
  db.keycombo.role.attribute = attribute role { text }
  db.keycombo.attlist =
    db.keycombo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.keycombo.action.attrib
  db.keycombo =
    
        element keycombo {
      db.keycombo.attlist, db.keycombination.contentmodel+
    }
}
div {
  db.keysym.role.attribute = attribute role { text }
  db.keysym.attlist =
    db.keysym.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.keysym =
    
        element keysym { db.keysym.attlist, db._text }
}
div {
  db.accel.role.attribute = attribute role { text }
  db.accel.attlist =
    db.accel.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.accel =
    
        element accel { db.accel.attlist, db._text }
}
div {
  db.shortcut.action.attrib = db.keycombo.action.attrib
  db.shortcut.role.attribute = attribute role { text }
  db.shortcut.attlist =
    db.shortcut.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.shortcut.action.attrib
  db.shortcut =
    
        element shortcut {
      db.shortcut.attlist, db.keycombination.contentmodel+
    }
}
db.os.inlines =
  db.prompt
  | db.envar
  | db.filename
  | db.command
  | db.computeroutput
  | db.userinput
db.computeroutput.inlines =
  (text | db.ubiq.inlines | db.os.inlines | db.technical.inlines)
  | db.co
  | db.markup.inlines
db.userinput.inlines =
  (text | db.ubiq.inlines | db.os.inlines | db.technical.inlines)
  | db.co
  | db.markup.inlines
  | db.gui.inlines
  | db.keyboard.inlines
db.prompt.inlines = db._text | db.co
div {
  db.prompt.role.attribute = attribute role { text }
  db.prompt.attlist =
    db.prompt.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.prompt =
    
        element prompt { db.prompt.attlist, db.prompt.inlines* }
}
div {
  db.envar.role.attribute = attribute role { text }
  db.envar.attlist =
    db.envar.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.envar =
    
        element envar { db.envar.attlist, db._text }
}
div {
  db.filename.class.enumeration =
    
        "devicefile"
    | 
            "directory"
    | 
            "extension"
    | 
            "headerfile"
    | 
            "libraryfile"
    | 
            "partition"
    | 
            "symlink"
  db.filename.class.attribute =
    
        attribute class { db.filename.class.enumeration }
  db.filename.path.attribute =
    
        attribute path { text }
  db.filename.role.attribute = attribute role { text }
  db.filename.attlist =
    db.filename.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.filename.path.attribute?
    & db.filename.class.attribute?
  db.filename =
    
        element filename { db.filename.attlist, db._text }
}
div {
  db.command.role.attribute = attribute role { text }
  db.command.attlist =
    db.command.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.command =
    
        element command { db.command.attlist, db._text }
}
div {
  db.computeroutput.role.attribute = attribute role { text }
  db.computeroutput.attlist =
    db.computeroutput.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.computeroutput =
    
        element computeroutput {
      db.computeroutput.attlist, db.computeroutput.inlines*
    }
}
div {
  db.userinput.role.attribute = attribute role { text }
  db.userinput.attlist =
    db.userinput.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.userinput =
    
        element userinput { db.userinput.attlist, db.userinput.inlines* }
}
div {
  db.cmdsynopsis.role.attribute = attribute role { text }
  db.cmdsynopsis.sepchar.attribute =
    
        attribute sepchar { text }
  db.cmdsynopsis.cmdlength.attribute =
    
        attribute cmdlength { text }
  db.cmdsynopsis.label.attribute = db.label.attribute
  db.cmdsynopsis.attlist =
    db.cmdsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.cmdsynopsis.sepchar.attribute?
    & db.cmdsynopsis.cmdlength.attribute?
    & db.cmdsynopsis.label.attribute?
  db.cmdsynopsis.info = db._info.title.forbidden
  db.cmdsynopsis =
    
        element cmdsynopsis {
      db.cmdsynopsis.attlist,
      db.cmdsynopsis.info,
      (db.command | db.arg | db.group | db.sbr)+,
      db.synopfragment*
    }
}
db.rep.enumeration =
  
    "norepeat"
  | 
        "repeat"
db.rep.attribute =
  
    [ a:defaultValue = "norepeat" ] attribute rep { db.rep.enumeration }
db.choice.enumeration =
  
    "opt"
  | 
        "plain"
  | 
        "req"
db.choice.opt.attribute =
  
    [ a:defaultValue = "opt" ] attribute choice { db.choice.enumeration }
db.choice.req.attribute =
  
    [ a:defaultValue = "req" ] attribute choice { db.choice.enumeration }
div {
  db.arg.role.attribute = attribute role { text }
  db.arg.rep.attribute = db.rep.attribute
  db.arg.choice.attribute = db.choice.opt.attribute
  db.arg.attlist =
    db.arg.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.arg.rep.attribute?
    & db.arg.choice.attribute?
  db.arg =
    
        element arg {
      db.arg.attlist,
      (db._text
       | db.arg
       | db.group
       | db.option
       | db.synopfragmentref
       | db.sbr)*
    }
}
div {
  db.group.role.attribute = attribute role { text }
  db.group.rep.attribute = db.rep.attribute
  db.group.choice.attribute = db.choice.opt.attribute
  db.group.attlist =
    db.group.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.group.rep.attribute?
    & db.group.choice.attribute?
  db.group =
    
        element group {
      db.group.attlist,
      (db.arg
       | db.group
       | db.option
       | db.synopfragmentref
       | db.replaceable
       | db.sbr)+
    }
}
div {
  db.sbr.role.attribute = attribute role { text }
  db.sbr.attlist = db.sbr.role.attribute? & db.common.attributes
  db.sbr =
    
        element sbr { db.sbr.attlist, empty }
}
div {
  db.synopfragment.role.attribute = attribute role { text }
  db.synopfragment.attlist =
    db.synopfragment.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.synopfragment =
    
        element synopfragment {
      db.synopfragment.attlist, (db.arg | db.group)+
    }
}
div {
  db.synopfragmentref.role.attribute = attribute role { text }
  db.synopfragmentref.attlist =
    db.synopfragmentref.role.attribute?
    & db.common.attributes
    & db.linkend.attribute
  db.synopfragmentref =
    
        [
      s:pattern [
        name = "Synopsis fragment type constraint"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:synopfragmentref"
          "\x{a}" ~
          "            "
          s:assert [
            test =
              "local-name(//*[@xml:id=current()/@linkend]) = 'synopfragment' and namespace-uri(//*[@xml:id=current()/@linkend]) = 'http://docbook.org/ns/docbook'"
            "@linkend on synopfragmentref must point to a synopfragment."
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element synopfragmentref { db.synopfragmentref.attlist, text }
}
db.programming.inlines =
  db.function
  | db.parameter
  | db.varname
  | db.returnvalue
  | db.type
  | db.classname
  | db.exceptionname
  | db.interfacename
  | db.methodname
  | db.modifier
  | db.initializer
  | db.oo.inlines
db.oo.inlines = db.ooclass | db.ooexception | db.oointerface
db.synopsis.blocks =
  (db.funcsynopsis
   | db.classsynopsis
   | db.methodsynopsis
   | db.constructorsynopsis
   | db.destructorsynopsis
   | db.fieldsynopsis)
  | db.cmdsynopsis
div {
  db.synopsis.role.attribute = attribute role { text }
  db.synopsis.label.attribute = db.label.attribute
  db.synopsis.attlist =
    db.synopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.synopsis.label.attribute?
  db.synopsis =
    
        element synopsis { db.synopsis.attlist, db.verbatim.contentmodel }
}
div {
  db.funcsynopsis.role.attribute = attribute role { text }
  db.funcsynopsis.attlist =
    db.funcsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
  db.funcsynopsis.info = db._info.title.forbidden
  db.funcsynopsis =
    
        element funcsynopsis {
      db.funcsynopsis.attlist,
      db.funcsynopsis.info,
      (db.funcsynopsisinfo | db.funcprototype)+
    }
}
div {
  db.funcsynopsisinfo.role.attribute = attribute role { text }
  db.funcsynopsisinfo.attlist =
    db.funcsynopsisinfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
  db.funcsynopsisinfo =
    
        element funcsynopsisinfo {
      db.funcsynopsisinfo.attlist, db.verbatim.contentmodel
    }
}
div {
  db.funcprototype.role.attribute = attribute role { text }
  db.funcprototype.attlist =
    db.funcprototype.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.funcprototype =
    
        element funcprototype {
      db.funcprototype.attlist,
      db.modifier*,
      db.funcdef,
      (db.void | db.varargs | (db.paramdef+, db.varargs?)),
      db.modifier*
    }
}
div {
  db.funcdef.role.attribute = attribute role { text }
  db.funcdef.attlist =
    db.funcdef.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.funcdef =
    
        element funcdef {
      db.funcdef.attlist, (db._text | db.type | db.function)*
    }
}
div {
  db.function.role.attribute = attribute role { text }
  db.function.attlist =
    db.function.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.function =
    
        element function { db.function.attlist, db._text }
}
div {
  db.void.role.attribute = attribute role { text }
  db.void.attlist =
    db.void.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.void =
    
        element void { db.void.attlist, empty }
}
div {
  db.varargs.role.attribute = attribute role { text }
  db.varargs.attlist =
    db.varargs.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.varargs =
    
        element varargs { db.varargs.attlist, empty }
}
div {
  db.paramdef.role.attribute = attribute role { text }
  db.paramdef.choice.enumeration =
    
        "opt"
    | 
            "req"
  db.paramdef.choice.attribute =
    
        [ a:defaultValue = "opt" ]
    attribute choice { db.paramdef.choice.enumeration }
  db.paramdef.attlist =
    db.paramdef.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.paramdef.choice.attribute?
  db.paramdef =
    
        element paramdef {
      db.paramdef.attlist,
      (db._text
       | db.initializer
       | db.type
       | db.parameter
       | db.funcparams)*
    }
}
div {
  db.funcparams.role.attribute = attribute role { text }
  db.funcparams.attlist =
    db.funcparams.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.funcparams =
    
        element funcparams { db.funcparams.attlist, db._text }
}
div {
  db.classsynopsis.role.attribute = attribute role { text }
  db.classsynopsis.class.enumeration =
    
        "class"
    | 
            "interface"
  db.classsynopsis.class.attribute =
    
        attribute class { db.classsynopsis.class.enumeration }
  db.classsynopsis.attlist =
    db.classsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
    & db.classsynopsis.class.attribute?
  db.classsynopsis =
    
        element classsynopsis {
      db.classsynopsis.attlist,
      db.oo.inlines+,
      (db.classsynopsisinfo
       | db.methodsynopsis
       | db.constructorsynopsis
       | db.destructorsynopsis
       | db.fieldsynopsis)*
    }
}
div {
  db.classsynopsisinfo.role.attribute = attribute role { text }
  db.classsynopsisinfo.attlist =
    db.classsynopsisinfo.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
  db.classsynopsisinfo =
    
        element classsynopsisinfo {
      db.classsynopsisinfo.attlist, db.verbatim.contentmodel
    }
}
div {
  db.ooclass.role.attribute = attribute role { text }
  db.ooclass.attlist =
    db.ooclass.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.ooclass =
    
        element ooclass {
      db.ooclass.attlist, (db.package | db.modifier)*, db.classname
    }
}
div {
  db.oointerface.role.attribute = attribute role { text }
  db.oointerface.attlist =
    db.oointerface.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.oointerface =
    
        element oointerface {
      db.oointerface.attlist,
      (db.package | db.modifier)*,
      db.interfacename
    }
}
div {
  db.ooexception.role.attribute = attribute role { text }
  db.ooexception.attlist =
    db.ooexception.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.ooexception =
    
        element ooexception {
      db.ooexception.attlist,
      (db.package | db.modifier)*,
      db.exceptionname
    }
}
db.modifier.xml.space.attribute =
  
    attribute xml:space {
    
        [
      # Ideally the definition of xml:space used on modifier would be
      # different from the definition used on the verbatim elements. The
      # verbatim elements forbid the use of xml:space="default" which
      # wouldn't be a problem on modifier. But doing that causes the
      # generated XSD schemas to be broken so I'm just reusing the existing
      # definition for now. It won't be backwards incompatible to fix this
      # problem in the future.
      #    |       #      "default"
      
    ]
    "preserve"
  }
div {
  db.modifier.role.attribute = attribute role { text }
  db.modifier.attlist =
    db.modifier.xml.space.attribute?
    & db.modifier.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.modifier =
    
        element modifier { db.modifier.attlist, db._text }
}
div {
  db.interfacename.role.attribute = attribute role { text }
  db.interfacename.attlist =
    db.interfacename.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.interfacename =
    
        element interfacename { db.interfacename.attlist, db._text }
}
div {
  db.exceptionname.role.attribute = attribute role { text }
  db.exceptionname.attlist =
    db.exceptionname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.exceptionname =
    
        element exceptionname { db.exceptionname.attlist, db._text }
}
div {
  db.fieldsynopsis.role.attribute = attribute role { text }
  db.fieldsynopsis.attlist =
    db.fieldsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
  db.fieldsynopsis =
    
        element fieldsynopsis {
      db.fieldsynopsis.attlist,
      db.modifier*,
      db.type?,
      db.varname,
      db.initializer?
    }
}
div {
  db.initializer.role.attribute = attribute role { text }
  db.initializer.attlist =
    db.initializer.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.initializer =
    
        element initializer { db.initializer.attlist, db._text }
}
div {
  db.constructorsynopsis.role.attribute = attribute role { text }
  db.constructorsynopsis.attlist =
    db.constructorsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
  db.constructorsynopsis =
    
        element constructorsynopsis {
      db.constructorsynopsis.attlist,
      db.modifier*,
      db.methodname?,
      (db.methodparam+ | db.void?),
      db.exceptionname*
    }
}
div {
  db.destructorsynopsis.role.attribute = attribute role { text }
  db.destructorsynopsis.attlist =
    db.destructorsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
  db.destructorsynopsis =
    
        element destructorsynopsis {
      db.destructorsynopsis.attlist,
      db.modifier*,
      db.methodname?,
      (db.methodparam+ | db.void?),
      db.exceptionname*
    }
}
div {
  db.methodsynopsis.role.attribute = attribute role { text }
  db.methodsynopsis.attlist =
    db.methodsynopsis.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.language.attribute?
  db.methodsynopsis =
    
        element methodsynopsis {
      db.methodsynopsis.attlist,
      db.modifier*,
      (db.type | db.void)?,
      db.methodname,
      (db.methodparam+ | db.void),
      db.exceptionname*,
      db.modifier*
    }
}
div {
  db.methodname.role.attribute = attribute role { text }
  db.methodname.attlist =
    db.methodname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.methodname =
    
        element methodname { db.methodname.attlist, db._text }
}
div {
  db.methodparam.role.attribute = attribute role { text }
  db.methodparam.rep.attribute = db.rep.attribute
  db.methodparam.choice.attribute = db.choice.req.attribute
  db.methodparam.attlist =
    db.methodparam.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.methodparam.rep.attribute?
    & db.methodparam.choice.attribute?
  db.methodparam =
    
        element methodparam {
      db.methodparam.attlist,
      db.modifier*,
      db.type?,
      ((db.modifier*, db.parameter, db.initializer?) | db.funcparams),
      db.modifier*
    }
}
div {
  db.varname.role.attribute = attribute role { text }
  db.varname.attlist =
    db.varname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.varname =
    
        element varname { db.varname.attlist, db._text }
}
div {
  db.returnvalue.role.attribute = attribute role { text }
  db.returnvalue.attlist =
    db.returnvalue.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.returnvalue =
    
        element returnvalue { db.returnvalue.attlist, db._text }
}
div {
  db.type.role.attribute = attribute role { text }
  db.type.attlist =
    db.type.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.type =
    
        element type { db.type.attlist, db._text }
}
div {
  db.classname.role.attribute = attribute role { text }
  db.classname.attlist =
    db.classname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.classname =
    
        element classname { db.classname.attlist, db._text }
}
div {
  db.programlisting.role.attribute = attribute role { text }
  db.programlisting.width.attribute = db.width.characters.attribute
  db.programlisting.attlist =
    db.programlisting.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.verbatim.attributes
    & db.programlisting.width.attribute?
  db.programlisting =
    
        element programlisting {
      db.programlisting.attlist, db.verbatim.contentmodel
    }
}
db.admonition.blocks =
  db.caution | db.important | db.note | db.tip | db.warning
db.admonition.contentmodel = db._info.title.only, db.all.blocks+
div {
  db.caution.role.attribute = attribute role { text }
  db.caution.attlist =
    db.caution.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.caution =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caution"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of caution"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caution"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of caution"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caution"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of caution"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caution"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of caution"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:caution"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of caution"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element caution { db.caution.attlist, db.admonition.contentmodel }
}
div {
  db.important.role.attribute = attribute role { text }
  db.important.attlist =
    db.important.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.important =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:important"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of important"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:important"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of important"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:important"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of important"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:important"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of important"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:important"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of important"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element important {
      db.important.attlist, db.admonition.contentmodel
    }
}
div {
  db.note.role.attribute = attribute role { text }
  db.note.attlist =
    db.note.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.note =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:note"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of note"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:note"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of note"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:note"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of note"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:note"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of note"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:note"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of note"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element note { db.note.attlist, db.admonition.contentmodel }
}
div {
  db.tip.role.attribute = attribute role { text }
  db.tip.attlist =
    db.tip.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.tip =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:tip"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of tip"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:tip"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of tip"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:tip"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of tip"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:tip"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of tip"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:tip"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of tip"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element tip { db.tip.attlist, db.admonition.contentmodel }
}
div {
  db.warning.role.attribute = attribute role { text }
  db.warning.attlist =
    db.warning.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.warning =
    
        [
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:warning"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:caution)"
            "caution must not occur in the descendants of warning"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:warning"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:important)"
            "important must not occur in the descendants of warning"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:warning"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:note)"
            "note must not occur in the descendants of warning"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:warning"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:tip)"
            "tip must not occur in the descendants of warning"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
      s:pattern [
        name = "Element exclusion"
        "\x{a}" ~
        "          "
        s:rule [
          context = "db:warning"
          "\x{a}" ~
          "            "
          s:assert [
            test = "not(.//db:warning)"
            "warning must not occur in the descendants of warning"
          ]
          "\x{a}" ~
          "          "
        ]
        "\x{a}" ~
        "        "
      ]
    ]
    element warning { db.warning.attlist, db.admonition.contentmodel }
}
db.error.inlines =
  db.errorcode | db.errortext | db.errorname | db.errortype
div {
  db.errorcode.role.attribute = attribute role { text }
  db.errorcode.attlist =
    db.errorcode.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.errorcode =
    
        element errorcode { db.errorcode.attlist, db._text }
}
div {
  db.errorname.role.attribute = attribute role { text }
  db.errorname.attlist =
    db.errorname.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.errorname =
    
        element errorname { db.errorname.attlist, db._text }
}
div {
  db.errortext.role.attribute = attribute role { text }
  db.errortext.attlist =
    db.errortext.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.errortext =
    
        element errortext { db.errortext.attlist, db._text }
}
div {
  db.errortype.role.attribute = attribute role { text }
  db.errortype.attlist =
    db.errortype.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.errortype =
    
        element errortype { db.errortype.attlist, db._text }
}
db.systemitem.inlines = db._text | db.co
div {
  db.systemitem.class.enumeration =
    
        "daemon"
    | 
            "domainname"
    | 
            "etheraddress"
    | 
            "event"
    | 
            "eventhandler"
    | 
            "filesystem"
    | 
            "fqdomainname"
    | 
            "groupname"
    | 
            "ipaddress"
    | 
            "library"
    | 
            "macro"
    | 
            "netmask"
    | 
            "newsgroup"
    | 
            "osname"
    | 
            "process"
    | 
            "protocol"
    | 
            "resource"
    | 
            "server"
    | 
            "service"
    | 
            "systemname"
    | 
            "username"
  db.systemitem.class.attribute =
    
        attribute class { db.systemitem.class.enumeration }
  db.systemitem.role.attribute = attribute role { text }
  db.systemitem.attlist =
    db.systemitem.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
    & db.systemitem.class.attribute?
  db.systemitem =
    
        element systemitem { db.systemitem.attlist, db.systemitem.inlines* }
}
div {
  db.option.role.attribute = attribute role { text }
  db.option.attlist =
    db.option.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.option =
    
        element option { db.option.attlist, db._text }
}
div {
  db.optional.role.attribute = attribute role { text }
  db.optional.attlist =
    db.optional.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.optional =
    
        element optional { db.optional.attlist, db._text }
}
div {
  db.property.role.attribute = attribute role { text }
  db.property.attlist =
    db.property.role.attribute?
    & db.common.attributes
    & db.common.linking.attributes
  db.property =
    
        element property { db.property.attlist, db._text }
}
div {
  db.xi.include.attlist =
    attribute href {
      xsd:anyURI { pattern = "[^#]+" }
    }?,
    [ a:defaultValue = "xml" ] attribute parse { "xml" | "text" }?,
    attribute xpointer { text }?,
    attribute encoding { text }?,
    attribute accept { text }?,
    attribute accept-language { text }?
  db.xi.include =
    
        element xi:include { db.xi.include.attlist, db.xi.fallback? }
}
div {
  # The fallback element has no attributes
  db.xi.fallback =
    
        element xi:fallback { db.all.blocks+ | db.all.inlines+ | db._any* }
}
